{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StyledComponent } from \"tailwindcss-react-native\";\nimport React, { useState } from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TailwindProvider } from \"tailwindcss-react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport Discover from \"./screens/Discover\";\nimport ItemScreen from \"./screens/ItemScreen\";\nimport Map from \"./screens/Map\";\nimport Login from \"./screens/Login\";\nimport 'react-native-gesture-handler';\nimport 'regenerator-runtime/runtime';\nimport { recognition } from \"./api/voiceRecognization\";\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  recognition.start;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    stopReco = _useState2[0],\n    setStopReco = _useState2[1];\n  recognition.onresult = function (event) {\n    var command = event.results[0][0].transcript;\n    {\n      recognition.stop();\n      setStopReco(true);\n    }\n  };\n  recognition.onend = function () {\n    if (!stopReco) {\n      recognition.start();\n    }\n  };\n  return _jsx(_Fragment, {\n    children: _jsx(TailwindProvider, {\n      children: _jsx(NavigationContainer, {\n        children: _jsxs(Stack.Navigator, {\n          children: [_jsx(Stack.Screen, {\n            name: \"Home\",\n            component: HomeScreen\n          }), _jsx(Stack.Screen, {\n            name: \"Discover\",\n            component: Discover\n          }), _jsx(Stack.Screen, {\n            name: \"ItemScreen\",\n            component: ItemScreen\n          }), _jsx(Stack.Screen, {\n            name: \"Map\",\n            component: Map\n          }), _jsx(Stack.Screen, {\n            name: \"Login\",\n            component: Login\n          })]\n        })\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useState","StatusBar","SafeAreaView","Text","View","TailwindProvider","NavigationContainer","createNativeStackNavigator","HomeScreen","Discover","ItemScreen","Map","Login","recognition","SpeechRecognition","useSpeechRecognition","Switch","Route","useHistory","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Stack","App","start","_useState","_useState2","_slicedToArray","stopReco","setStopReco","onresult","event","command","results","transcript","stop","onend","children","Navigator","Screen","name","component"],"sources":["D:/xampp/htdocs/gotravel1/tourism simplified through voice/App.js"],"sourcesContent":["import React ,{useState} from \"react\";\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport { SafeAreaView, Text, View } from \"react-native\";\r\nimport { TailwindProvider } from \"tailwindcss-react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport HomeScreen from \"./screens/HomeScreen\";\r\nimport Discover from \"./screens/Discover\";\r\nimport ItemScreen from \"./screens/ItemScreen\";\r\nimport Map from \"./screens/Map\";\r\nimport Login from \"./screens/Login\";\r\nimport 'react-native-gesture-handler';\r\nimport 'regenerator-runtime/runtime';\r\n\r\nimport { recognition } from \"./api/voiceRecognization\";\r\n\r\n//import { BrowserRouter, Route,Link, Redirect } from \"react-router-dom\";\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\nimport { Switch, Route,useHistory } from \"react-router-dom\";\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {\r\n\r\n\r\nrecognition.start\r\n  //const history = useHistory();\r\n  const [stopReco, setStopReco] = useState(false);\r\n\r\n  recognition.onresult = (event) => {\r\n    const command = event.results[0][0].transcript;\r\n\r\n    // if (command.includes(\"go to\") || command.includes(\"navigate to\")) {\r\n    //   if (command.includes(\"home\") || command.includes(\"index\")) {\r\n    //     history.push(\"/\");\r\n    //   } else if (\r\n    //     command.includes(\"contact\") ||\r\n    //     command.includes(\"contact us\")\r\n    //   ) {\r\n    //     history.push(\"/contact\");\r\n    //   } else if (\r\n    //     command.includes(\"tutorials\") ||\r\n    //     command.includes(\"tutorial\")\r\n    //   ) {\r\n    //     history.push(\"/tutorials\");\r\n    //   } else if (command.includes(\"about\") || command.includes(\"about us\")) {\r\n    //     history.push(\"/about\");\r\n    //   }\r\n    // } else if (\r\n    //   command.includes(\"stop listening\") ||\r\n    //   command.includes(\"stop recognition\") ||\r\n    //   command.includes(\"stop recognizing\") ||\r\n    //   command.includes(\"stop voice controlling\") ||\r\n    //   command.includes(\"stop voice control\")\r\n    // ) \r\n    {\r\n      recognition.stop();\r\n      setStopReco(true);\r\n    }\r\n  };\r\n\r\n  recognition.onend = () => {\r\n    if (!stopReco) {\r\n      recognition.start();\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// recognition.start();\r\n\r\n// recognition.onresult=(event)=>{\r\n//   console.log(event);\r\n// };\r\n\r\n// recognition.onend=() =>{\r\n//   recognition.start();\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // const commands =[\r\n  //   {\r\n  //   commands: [\"Go to *\",\"Open\"],\r\n  //   callback(Redirect) => setRedirectUrl(Redirect)\r\n  //   }\r\n  // ]\r\n\r\n// const commands =[\r\n//   {\r\n//     command:[\"Go to *\", \"Open *\"],\r\n//     callback: (redirectPage) => setRedirectUrl(redirectPage),\r\n//   },\r\n// ];\r\n\r\n//   const {transcipt} = useSpeechRecognition({commands});\r\n//   const {redirectUrl,setRedirectUrl}=(useState(\"\"));\r\n\r\n//   const pages=[\"Discover\", \"Map\"];\r\n//   const urls={\r\n//     Discover:\"/Discover\",\r\n//     Map: \"/Map\",\r\n//   };\r\n\r\n//   if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n//     return null\r\n//   }\r\n\r\n//   let Redirect =\"\";\r\n//   if(redirectUrl){\r\n//     if(pages.includes(redirectUrl)){\r\n//       Redirect = <Redirect to={urls[redirectUrl]} ></Redirect>\r\n//     }\r\n//     else\r\n//     {\r\n//       redirect= <p>Could not find page : {redirectUrl}</p>\r\n//     }\r\n//   }\r\n\r\n  return (\r\n    <>  \r\n    {/* <div>\r\n      <p id=\"transcript\"> Transcript:{transcipt}</p>\r\n      <button onClick={SpeechRecognition.startListening}>Start</button>\r\n    </div> */}\r\n    \r\n   \r\n    <TailwindProvider>\r\n      <NavigationContainer>\r\n        <Stack.Navigator>\r\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\r\n          <Stack.Screen name=\"Discover\" component={Discover} />\r\n          <Stack.Screen name=\"ItemScreen\" component={ItemScreen} />\r\n          <Stack.Screen name=\"Map\" component={Map}/>\r\n          <Stack.Screen name=\"Login\" component={Login}/>\r\n        </Stack.Navigator>\r\n      </NavigationContainer>\r\n    </TailwindProvider>\r\n</>\r\n    \r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,SAASC,SAAS,QAAQ,iBAAiB;AAAC,OAAAC,YAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAE5C,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,0BAA0B,QAAQ,gCAAgC;AAC3E,OAAOC,UAAU;AACjB,OAAOC,QAAQ;AACf,OAAOC,UAAU;AACjB,OAAOC,GAAG;AACV,OAAOC,KAAK;AACZ,OAAO,8BAA8B;AACrC,OAAO,6BAA6B;AAEpC,SAASC,WAAW;AAGpB,OAAOC,iBAAiB,IAAIC,oBAAoB,QAAQ,0BAA0B;AAClF,SAASC,MAAM,EAAEC,KAAK,EAACC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE5D,IAAMC,KAAK,GAAGlB,0BAA0B,EAAE;AAE1C,eAAe,SAASmB,GAAGA,CAAA,EAAG;EAG9Bb,WAAW,CAACc,KAAK;EAEf,IAAAC,SAAA,GAAgC5B,QAAQ,CAAC,KAAK,CAAC;IAAA6B,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAxCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAE5BhB,WAAW,CAACoB,QAAQ,GAAG,UAACC,KAAK,EAAK;IAChC,IAAMC,OAAO,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,UAAU;IAyB9C;MACExB,WAAW,CAACyB,IAAI,EAAE;MAClBN,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC;EAEDnB,WAAW,CAAC0B,KAAK,GAAG,YAAM;IACxB,IAAI,CAACR,QAAQ,EAAE;MACblB,WAAW,CAACc,KAAK,EAAE;IACrB;EACF,CAAC;EA+ED,OACEP,IAAA,CAAAI,SAAA;IAAAgB,QAAA,EAOApB,IAAA,CAACf,gBAAgB;MAAAmC,QAAA,EACfpB,IAAA,CAACd,mBAAmB;QAAAkC,QAAA,EAClBlB,KAAA,CAACG,KAAK,CAACgB,SAAS;UAAAD,QAAA,GACdpB,IAAA,CAACK,KAAK,CAACiB,MAAM;YAACC,IAAI,EAAC,MAAM;YAACC,SAAS,EAAEpC;UAAW,EAAG,EACnDY,IAAA,CAACK,KAAK,CAACiB,MAAM;YAACC,IAAI,EAAC,UAAU;YAACC,SAAS,EAAEnC;UAAS,EAAG,EACrDW,IAAA,CAACK,KAAK,CAACiB,MAAM;YAACC,IAAI,EAAC,YAAY;YAACC,SAAS,EAAElC;UAAW,EAAG,EACzDU,IAAA,CAACK,KAAK,CAACiB,MAAM;YAACC,IAAI,EAAC,KAAK;YAACC,SAAS,EAAEjC;UAAI,EAAE,EAC1CS,IAAA,CAACK,KAAK,CAACiB,MAAM;YAACC,IAAI,EAAC,OAAO;YAACC,SAAS,EAAEhC;UAAM,EAAE;QAAA;MAC9B;IACE;EACL,EACpB;AAGH"},"metadata":{},"sourceType":"module","externalDependencies":[]}