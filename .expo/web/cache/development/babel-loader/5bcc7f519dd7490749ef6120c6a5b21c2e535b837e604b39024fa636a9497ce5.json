{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StyledComponent } from \"tailwindcss-react-native\";\nimport React, { useState, useEffect } from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TailwindProvider } from \"tailwindcss-react-native\";\nimport { NavigationContainer, useFocusEffect } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport Discover from \"./screens/Discover\";\nimport ItemScreen from \"./screens/ItemScreen\";\nimport Map from \"./screens/Map\";\nimport New from \"./screens/New\";\nimport 'react-native-gesture-handler';\nimport 'regenerator-runtime/runtime';\nimport Login from \"./screens/Login\";\nimport New_sign from \"./screens/New_sign\";\nimport Contact from \"./screens/Contact\";\nimport Speech from \"./screens/Speech\";\nimport { recognition } from \"./api/VoiceRecognization\";\nimport { useNavigation, redirect } from \"react-router-dom\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport { useLayoutEffect } from \"react\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\nimport { useHistory } from 'react-router-dom';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    recognitionStarted = _useState2[0],\n    setRecognitionStarted = _useState2[1];\n  useFocusEffect(function () {\n    if (!recognitionStarted) {\n      recognition.start();\n      setRecognitionStarted(true);\n    }\n    return function () {\n      recognition.stop();\n      setRecognitionStarted(false);\n    };\n  });\n  useEffect(function () {\n    recognition.onresult = function (event) {\n      var command = event.results[0][0].transcript;\n      console.log(command);\n      if (command.includes(\"navigate to\") || command.includes(\"go to\")) {\n        if (command.includes(\"homepage\") || command.includes(\"indexpage\")) {\n          navigation.navigate(\"Home\");\n          console.log(command);\n        } else if (command.includes(\"Discover\") || command.includes(\"Discover page\")) {\n          navigation.navigate(\"Discover\");\n          console.log(command);\n        } else if (command.includes(\"Map\") || command.includes(\"Map page\")) {\n          navigation.navigate(\"Map\");\n          console.log(command);\n        } else if (command.includes(\"Contact\") || command.includes(\"Contact page\")) {\n          navigation.navigate(\"Contact\");\n          console.log(command);\n        } else if (command.includes(\"Sign up\") || command.includes(\"Sign up page\")) {\n          navigation.navigate(\"New\");\n          console.log(command);\n        }\n      }\n    };\n    recognition.onend = function () {\n      recognition.start();\n    };\n    return function () {\n      recognition.onresult = null;\n      recognition.onend = null;\n    };\n  }, [navigation]);\n  return _jsx(TailwindProvider, {\n    children: _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        children: [_jsx(Stack.Screen, {\n          name: \"Home\",\n          component: HomeScreen\n        }), _jsx(Stack.Screen, {\n          name: \"Discover\",\n          component: Discover\n        }), _jsx(Stack.Screen, {\n          name: \"ItemScreen\",\n          component: ItemScreen\n        }), _jsx(Stack.Screen, {\n          name: \"New\",\n          component: New\n        }), _jsx(Stack.Screen, {\n          name: \"Map\",\n          component: Map\n        }), _jsx(Stack.Screen, {\n          name: \"New_sign\",\n          component: New_sign\n        }), _jsx(Stack.Screen, {\n          name: \"Contact\",\n          component: Contact\n        }), _jsx(Stack.Screen, {\n          name: \"Speech\",\n          component: Speech\n        })]\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","StatusBar","SafeAreaView","Text","View","TailwindProvider","NavigationContainer","useFocusEffect","createNativeStackNavigator","HomeScreen","Discover","ItemScreen","Map","New","Login","New_sign","Contact","Speech","recognition","useNavigation","redirect","SpeechRecognition","useSpeechRecognition","useLayoutEffect","Navigate","useNavigate","useHistory","jsx","_jsx","jsxs","_jsxs","Stack","App","_useState","_useState2","_slicedToArray","recognitionStarted","setRecognitionStarted","start","stop","onresult","event","command","results","transcript","console","log","includes","navigation","navigate","onend","children","Navigator","Screen","name","component"],"sources":["D:/xampp/htdocs/gotravel1/tourism simplified through voice/App.js"],"sourcesContent":["// import React ,{useState} from \"react\";\r\n// import { StatusBar } from \"expo-status-bar\";\r\n// import { SafeAreaView, Text, View } from \"react-native\";\r\n// import { TailwindProvider } from \"tailwindcss-react-native\";\r\n// import { NavigationContainer } from \"@react-navigation/native\";\r\n// import { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\n// import HomeScreen from \"./screens/HomeScreen\";\r\n// import Discover from \"./screens/Discover\";\r\n// import ItemScreen from \"./screens/ItemScreen\";\r\n// import Map from \"./screens/Map\";\r\n// import New from \"./screens/New\";\r\n\r\n// //import Login from \"./screens/Login\";\r\n// import 'react-native-gesture-handler';\r\n// import 'regenerator-runtime/runtime';\r\n// import Login from \"./screens/Login\";\r\n// import New_sign from \"./screens/New_sign\";\r\n// import Contact from \"./screens/Contact\";\r\n// import Speech from \"./screens/Speech\";\r\n// import { recognition } from \"./api/VoiceRecognization\";\r\n// import { useNavigation, redirect, Route, Routes } from \"react-router-dom\";\r\n// //import { Link, useNavigation} from \"@react-navigation/native\";\r\n// import SpeechRecognition,{useSpeechRecognition} from \"react-speech-recognition\";\r\n// import { useFocusEffect } from \"@react-navigation/native\";\r\n// import { useLayoutEffect } from \"react\";\r\n// import { Navigate, useNavigate } from \"react-router-dom\";\r\n// import {useHistory} from 'react-router-dom';\r\n// const Stack = createNativeStackNavigator();\r\n\r\n\r\n// export default function App() {\r\n//   //const navigate = Navigate();\r\n//   const navigation = useNavigation();\r\n  \r\n//   // // useLayoutEffect(() => {\r\n//   // //   navigate.setOptions({\r\n//   // //     headerShown: false,\r\n//   // //   });\r\n//   // // }, []);\r\n\r\n//   useFocusEffect(\r\n//     React.useCallback(() => {\r\n//       const onBackPress = () => {\r\n//         navigation.goBack();\r\n//         return true;\r\n//       };\r\n//     }\r\n//     )\r\n//     )\r\n\r\n//     BackHandler.addEventListener('hardwareBackPress', onBackPress);\r\n\r\n \r\n\r\n//   console.log(recognition)\r\n//   recognition.start()\r\n\r\n//   recognition.onresult=(event)=>{\r\n  \r\n//     const command =event.results[0][0].transcript;\r\n//     //console.log(command);\r\n    \r\n//     if(command.includes(\"navigate to\") || command.includes(\"go to\")){\r\n      \r\n//        if(command.includes(\"homepage\") || command.includes(\"indexpage\")){\r\n//           //navigate.push(\"/HomeScreen\")\r\n//            //navigate.push(\"/HomeScreen\")\r\n//           //navigation.push()\r\n//              console.log(command);\r\n//         }\r\n//         else if(command.includes(\"Discover\") || command.includes(\"Discover page\")){\r\n//     //    navigate.push(\"/Discover\")\r\n//               console.log(command);\r\n//       }\r\n//         else if(command.includes(\"Map\") || command.includes(\"Map page\")){\r\n//     //    navigate.push(\"/Map\")\r\n//               console.log(command);\r\n//       }\r\n//         else if(command.includes(\"Contact\") || command.includes(\"Contact page\")){\r\n//     //    navigate.push(\"/Contact\")\r\n//               console.log(command);\r\n//       }\r\n//         else if(command.includes(\"Sign up\") || command.includes(\"Sign up page\")){\r\n//     //    navigate.push(\"/New\")\r\n//               console.log(command);\r\n//       }\r\n//    }\r\n//   }\r\n\r\n//   recognition.onend=()=>{\r\n//     recognition.start()\r\n\r\n//   }\r\n//   return (\r\n    \r\n//     <TailwindProvider>\r\n//       <NavigationContainer>\r\n//         <Stack.Navigator>\r\n//           <Routes>\r\n//           <Route>\r\n//           <Stack.Screen name=\"Home\" component={HomeScreen} /></Route>\r\n//           <Route>\r\n//           <Stack.Screen name=\"Discover\" component={Discover} /></Route>\r\n//           <Route>\r\n//           <Stack.Screen name=\"ItemScreen\" component={ItemScreen} /></Route>\r\n//           <Route>\r\n//           <Stack.Screen name=\"New\" component={New}></Stack.Screen></Route>\r\n//           <Stack.Screen name=\"Map\" component={Map}/>\r\n//           <Stack.Screen name=\"New_sign\" component={New_sign}></Stack.Screen>\r\n//           <Stack.Screen name=\"Contact\" component={Contact}></Stack.Screen>\r\n//           <Stack.Screen name=\"Speech\" component={Speech}></Stack.Screen>\r\n//           </Routes>\r\n          \r\n          \r\n//         </Stack.Navigator>\r\n//       </NavigationContainer>\r\n//     </TailwindProvider>\r\n\r\n    \r\n//   );\r\n// }\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport { SafeAreaView, Text, View } from \"react-native\";\r\nimport { TailwindProvider } from \"tailwindcss-react-native\";\r\nimport { NavigationContainer, useFocusEffect } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport HomeScreen from \"./screens/HomeScreen\";\r\nimport Discover from \"./screens/Discover\";\r\nimport ItemScreen from \"./screens/ItemScreen\";\r\nimport Map from \"./screens/Map\";\r\nimport New from \"./screens/New\";\r\n\r\nimport 'react-native-gesture-handler';\r\nimport 'regenerator-runtime/runtime';\r\nimport Login from \"./screens/Login\";\r\nimport New_sign from \"./screens/New_sign\";\r\nimport Contact from \"./screens/Contact\";\r\nimport Speech from \"./screens/Speech\";\r\nimport { recognition } from \"./api/VoiceRecognization\";\r\nimport { useNavigation, redirect } from \"react-router-dom\";\r\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\r\n\r\nimport { useLayoutEffect } from \"react\";\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {\r\n\r\n  const [recognitionStarted, setRecognitionStarted] = useState(false);\r\n\r\n  useFocusEffect(() => {\r\n    if (!recognitionStarted) {\r\n      recognition.start();\r\n      setRecognitionStarted(true);\r\n    }\r\n    \r\n    return () => {\r\n      recognition.stop();\r\n      setRecognitionStarted(false);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    recognition.onresult = (event) => {\r\n      const command = event.results[0][0].transcript;\r\n      console.log(command);\r\n\r\n      if (command.includes(\"navigate to\") || command.includes(\"go to\")) {\r\n\r\n        if (command.includes(\"homepage\") || command.includes(\"indexpage\")) {\r\n          navigation.navigate(\"Home\");\r\n          console.log(command);\r\n        } else if (command.includes(\"Discover\") || command.includes(\"Discover page\")) {\r\n          navigation.navigate(\"Discover\");\r\n          console.log(command);\r\n        } else if (command.includes(\"Map\") || command.includes(\"Map page\")) {\r\n          navigation.navigate(\"Map\");\r\n          console.log(command);\r\n        } else if (command.includes(\"Contact\") || command.includes(\"Contact page\")) {\r\n          navigation.navigate(\"Contact\");\r\n          console.log(command);\r\n        } else if (command.includes(\"Sign up\") || command.includes(\"Sign up page\")) {\r\n          navigation.navigate(\"New\");\r\n          console.log(command);\r\n        }\r\n      }\r\n    };\r\n\r\n    recognition.onend = () => {\r\n      recognition.start();\r\n    };\r\n\r\n    return () => {\r\n      recognition.onresult = null;\r\n      recognition.onend = null;\r\n    };\r\n\r\n  }, [navigation]);\r\n\r\n  return (\r\n    <TailwindProvider>\r\n      <NavigationContainer>\r\n        <Stack.Navigator>\r\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\r\n          <Stack.Screen name=\"Discover\" component={Discover} />\r\n          <Stack.Screen name=\"ItemScreen\" component={ItemScreen} />\r\n          <Stack.Screen name=\"New\" component={New}></Stack.Screen>\r\n          <Stack.Screen name=\"Map\" component={Map} />\r\n          <Stack.Screen name=\"New_sign\" component={New_sign}></Stack.Screen>\r\n          <Stack.Screen name=\"Contact\" component={Contact}></Stack.Screen>\r\n          <Stack.Screen name=\"Speech\" component={Speech}></Stack.Screen>\r\n        </Stack.Navigator>\r\n      </NavigationContainer>\r\n    </TailwindProvider>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}