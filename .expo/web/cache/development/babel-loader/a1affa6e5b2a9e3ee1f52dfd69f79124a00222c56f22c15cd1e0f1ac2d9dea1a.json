{"ast":null,"code":"import NativeReanimatedModule from \"./NativeReanimated\";\nimport { makeShareableCloneOnUIRecursive, makeShareableCloneRecursive, registerShareableMapping } from \"./shareables\";\nimport { runOnUI } from \"./threads\";\nimport { valueSetter } from \"./valueSetter\";\nexport { stopMapper } from \"./mappers\";\nexport function makeUIMutable(initial, syncDataHolder) {\n  'worklet';\n\n  var listeners = new Map();\n  var value = initial;\n  var self = {\n    set value(newValue) {\n      valueSetter(self, newValue);\n    },\n    get value() {\n      return value;\n    },\n    set _value(newValue) {\n      value = newValue;\n      if (syncDataHolder) {\n        _updateDataSynchronously(syncDataHolder, makeShareableCloneOnUIRecursive(newValue));\n      }\n      listeners.forEach(function (listener) {\n        listener(newValue);\n      });\n    },\n    get _value() {\n      return value;\n    },\n    addListener: function addListener(id, listener) {\n      listeners.set(id, listener);\n    },\n    removeListener: function removeListener(id) {\n      listeners.delete(id);\n    },\n    _animation: null,\n    _isReanimatedSharedValue: true\n  };\n  return self;\n}\nexport function makeMutable(initial) {\n  var oneWayReadsOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var value = initial;\n  var syncDataHolder;\n  if (!oneWayReadsOnly && NativeReanimatedModule.native) {\n    syncDataHolder = NativeReanimatedModule.makeSynchronizedDataHolder(makeShareableCloneRecursive(value));\n    registerShareableMapping(syncDataHolder);\n  }\n  var handle = makeShareableCloneRecursive({\n    __init: function __init() {\n      'worklet';\n\n      return makeUIMutable(initial, syncDataHolder);\n    }\n  });\n  var listeners = NativeReanimatedModule.native ? undefined : new Map();\n  var mutable = {\n    set value(newValue) {\n      if (NativeReanimatedModule.native) {\n        runOnUI(function () {\n          'worklet';\n\n          mutable.value = newValue;\n        })();\n      } else {\n        valueSetter(mutable, newValue);\n      }\n    },\n    get value() {\n      if (syncDataHolder) {\n        return NativeReanimatedModule.getDataSynchronously(syncDataHolder);\n      }\n      return value;\n    },\n    set _value(newValue) {\n      if (NativeReanimatedModule.native) {\n        throw new Error('Setting `_value` directly is only possible on the UI runtime');\n      }\n      value = newValue;\n      listeners.forEach(function (listener) {\n        listener(newValue);\n      });\n    },\n    get _value() {\n      if (NativeReanimatedModule.native) {\n        throw new Error('Reading from `_value` directly is only possible on the UI runtime');\n      }\n      return value;\n    },\n    modify: function modify(modifier) {\n      runOnUI(function () {\n        'worklet';\n\n        mutable.value = modifier(mutable.value);\n      })();\n    },\n    addListener: function addListener(id, listener) {\n      if (NativeReanimatedModule.native) {\n        throw new Error('adding listeners is only possible on the UI runtime');\n      }\n      listeners.set(id, listener);\n    },\n    removeListener: function removeListener(id) {\n      if (NativeReanimatedModule.native) {\n        throw new Error('removing listeners is only possible on the UI runtime');\n      }\n      listeners.delete(id);\n    },\n    _isReanimatedSharedValue: true\n  };\n  registerShareableMapping(mutable, handle);\n  return mutable;\n}\nexport function makeRemote() {\n  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var handle = makeShareableCloneRecursive({\n    __init: function __init() {\n      'worklet';\n\n      return initial;\n    }\n  });\n  registerShareableMapping(initial, handle);\n  return initial;\n}","map":{"version":3,"names":["NativeReanimatedModule","makeShareableCloneOnUIRecursive","makeShareableCloneRecursive","registerShareableMapping","runOnUI","valueSetter","stopMapper","makeUIMutable","initial","syncDataHolder","listeners","Map","value","self","newValue","_value","_updateDataSynchronously","forEach","listener","addListener","id","set","removeListener","delete","_animation","_isReanimatedSharedValue","makeMutable","oneWayReadsOnly","arguments","length","undefined","native","makeSynchronizedDataHolder","handle","__init","mutable","getDataSynchronously","Error","modify","modifier","makeRemote"],"sources":["C:\\Project\\toursim-simplified-through-voice-master\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\mutables.ts"],"sourcesContent":["import NativeReanimatedModule from './NativeReanimated';\nimport { SharedValue, ShareableSyncDataHolderRef } from './commonTypes';\nimport {\n  makeShareableCloneOnUIRecursive,\n  makeShareableCloneRecursive,\n  registerShareableMapping,\n} from './shareables';\nimport { runOnUI } from './threads';\nimport { valueSetter } from './valueSetter';\nexport { stopMapper } from './mappers';\n\nexport function makeUIMutable<T>(\n  initial: T,\n  syncDataHolder?: ShareableSyncDataHolderRef<T>\n) {\n  'worklet';\n\n  const listeners = new Map();\n  let value = initial;\n\n  const self = {\n    set value(newValue) {\n      valueSetter(self, newValue);\n    },\n    get value() {\n      return value;\n    },\n    /**\n     * _value prop should only be accessed by the valueSetter implementation\n     * which may make the decision about updating the mutable value depending\n     * on the provided new value. All other places should only attempt to modify\n     * the mutable by assigning to value prop directly.\n     */\n    set _value(newValue: T) {\n      value = newValue;\n      if (syncDataHolder) {\n        _updateDataSynchronously(\n          syncDataHolder,\n          makeShareableCloneOnUIRecursive(newValue)\n        );\n      }\n      listeners.forEach((listener) => {\n        listener(newValue);\n      });\n    },\n    get _value(): T {\n      return value;\n    },\n    addListener: (id: number, listener: (newValue: T) => void) => {\n      listeners.set(id, listener);\n    },\n    removeListener: (id: number) => {\n      listeners.delete(id);\n    },\n    _animation: null,\n    _isReanimatedSharedValue: true,\n  };\n  return self;\n}\n\nexport function makeMutable<T>(\n  initial: T,\n  oneWayReadsOnly = false\n): SharedValue<T> {\n  let value: T = initial;\n  let syncDataHolder: ShareableSyncDataHolderRef<T> | undefined;\n  if (!oneWayReadsOnly && NativeReanimatedModule.native) {\n    // updates are always synchronous when running on web or in Jest environment\n    syncDataHolder = NativeReanimatedModule.makeSynchronizedDataHolder(\n      makeShareableCloneRecursive(value)\n    );\n    registerShareableMapping(syncDataHolder);\n  }\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return makeUIMutable(initial, syncDataHolder);\n    },\n  });\n  // listeners can only work on JS thread on Web and jest environments\n  const listeners = NativeReanimatedModule.native ? undefined : new Map();\n  const mutable = {\n    set value(newValue) {\n      if (NativeReanimatedModule.native) {\n        runOnUI(() => {\n          'worklet';\n          mutable.value = newValue;\n        })();\n      } else {\n        valueSetter(mutable, newValue);\n      }\n    },\n    get value() {\n      if (syncDataHolder) {\n        return NativeReanimatedModule.getDataSynchronously(syncDataHolder);\n      }\n      return value;\n    },\n    set _value(newValue: T) {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          'Setting `_value` directly is only possible on the UI runtime'\n        );\n      }\n      value = newValue;\n      listeners!.forEach((listener) => {\n        listener(newValue);\n      });\n    },\n    get _value(): T {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          'Reading from `_value` directly is only possible on the UI runtime'\n        );\n      }\n      return value;\n    },\n    modify: (modifier: (value: T) => T) => {\n      runOnUI(() => {\n        'worklet';\n        mutable.value = modifier(mutable.value);\n      })();\n    },\n    addListener: (id: number, listener: (value: T) => void) => {\n      if (NativeReanimatedModule.native) {\n        throw new Error('adding listeners is only possible on the UI runtime');\n      }\n      listeners!.set(id, listener);\n    },\n    removeListener: (id: number) => {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          'removing listeners is only possible on the UI runtime'\n        );\n      }\n      listeners!.delete(id);\n    },\n    _isReanimatedSharedValue: true,\n  };\n  registerShareableMapping(mutable, handle);\n  return mutable;\n}\n\nexport function makeRemote<T extends object>(initial: T = {} as T): T {\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return initial;\n    },\n  });\n  registerShareableMapping(initial, handle);\n  return initial;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}