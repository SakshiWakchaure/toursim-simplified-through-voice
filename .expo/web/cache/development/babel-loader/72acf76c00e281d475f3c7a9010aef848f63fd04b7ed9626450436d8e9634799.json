{"ast":null,"code":"import { StyledComponent } from \"tailwindcss-react-native\";\nimport React, { useState } from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TailwindProvider } from \"tailwindcss-react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport Discover from \"./screens/Discover\";\nimport ItemScreen from \"./screens/ItemScreen\";\nimport Map from \"./screens/Map\";\nimport Login from \"./screens/Login\";\nimport 'react-native-gesture-handler';\nimport 'regenerator-runtime/runtime';\nimport { BrowserRouter, Route, Link, redirect } from \"react-router-dom\";\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var commands = [{\n    command: [\"Go to *\", \"Open *\"],\n    callback: function callback(redirectPage) {\n      return setRedirectUrl(redirectPage);\n    }\n  }];\n  var _useSpeechRecognition = useSpeechRecognition({\n      commands: commands\n    }),\n    transcipt = _useSpeechRecognition.transcipt;\n  var _useState = useState(\"\"),\n    redirectUrl = _useState.redirectUrl,\n    setRedirectUrl = _useState.setRedirectUrl;\n  var pages = [\"Discover\", \"Map\"];\n  var urls = {\n    Discover: \"/Discover\",\n    Map: \"/Map\"\n  };\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return null;\n  }\n  var redirect = \"\";\n  if (redirectUrl) {\n    if (pages.includes(redirectUrl)) {\n      redirect = _jsx(\"redirect\", {});\n    }\n  }\n  return _jsxs(_Fragment, {\n    children: [_jsxs(\"div\", {\n      children: [_jsxs(\"p\", {\n        id: \"transcript\",\n        children: [\" Transcript:\", transcipt]\n      }), _jsx(\"button\", {\n        onClick: SpeechRecognition.startListening,\n        children: \"Start\"\n      })]\n    }), _jsx(TailwindProvider, {\n      children: _jsx(NavigationContainer, {\n        children: _jsxs(Stack.Navigator, {\n          children: [_jsx(Stack.Screen, {\n            name: \"Home\",\n            component: HomeScreen\n          }), _jsx(Stack.Screen, {\n            name: \"Discover\",\n            component: Discover\n          }), _jsx(Stack.Screen, {\n            name: \"ItemScreen\",\n            component: ItemScreen\n          }), _jsx(Stack.Screen, {\n            name: \"Map\",\n            component: Map\n          }), _jsx(Stack.Screen, {\n            name: \"Login\",\n            component: Login\n          })]\n        })\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","StatusBar","SafeAreaView","Text","View","TailwindProvider","NavigationContainer","createNativeStackNavigator","HomeScreen","Discover","ItemScreen","Map","Login","BrowserRouter","Route","Link","redirect","SpeechRecognition","useSpeechRecognition","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Stack","App","commands","command","callback","redirectPage","setRedirectUrl","_useSpeechRecognition","transcipt","_useState","redirectUrl","pages","urls","browserSupportsSpeechRecognition","includes","children","id","onClick","startListening","Navigator","Screen","name","component"],"sources":["D:/xampp/htdocs/gotravel1/tourism simplified through voice/App.js"],"sourcesContent":["import React ,{useState} from \"react\";\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport { SafeAreaView, Text, View } from \"react-native\";\r\nimport { TailwindProvider } from \"tailwindcss-react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport HomeScreen from \"./screens/HomeScreen\";\r\nimport Discover from \"./screens/Discover\";\r\nimport ItemScreen from \"./screens/ItemScreen\";\r\nimport Map from \"./screens/Map\";\r\nimport Login from \"./screens/Login\";\r\nimport 'react-native-gesture-handler';\r\nimport 'regenerator-runtime/runtime';\r\n\r\n\r\nimport { BrowserRouter, Route,Link, redirect } from \"react-router-dom\";\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {\r\n  // const commands =[\r\n  //   {\r\n  //   commands: [\"Go to *\",\"Open\"],\r\n  //   callback(redirect) => setRedirectUrl(redirect)\r\n  //   }\r\n  // ]\r\n\r\nconst commands =[\r\n  {\r\n    command:[\"Go to *\", \"Open *\"],\r\n    callback: (redirectPage) => setRedirectUrl(redirectPage),\r\n  },\r\n];\r\n\r\n  const {transcipt} = useSpeechRecognition({commands});\r\n  const {redirectUrl,setRedirectUrl}=(useState(\"\"));\r\n\r\n  const pages=[\"Discover\", \"Map\"];\r\n  const urls={\r\n    Discover:\"/Discover\",\r\n    Map: \"/Map\",\r\n  };\r\n\r\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n    return null\r\n  }\r\n\r\n  let redirect =\"\";\r\n  if(redirectUrl){\r\n    if(pages.includes(redirectUrl)){\r\n      redirect = <redirect></redirect>\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>  \r\n    <div>\r\n      <p id=\"transcript\"> Transcript:{transcipt}</p>\r\n      <button onClick={SpeechRecognition.startListening}>Start</button>\r\n    </div>\r\n    \r\n   \r\n    <TailwindProvider>\r\n      <NavigationContainer>\r\n        <Stack.Navigator>\r\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\r\n          <Stack.Screen name=\"Discover\" component={Discover} />\r\n          <Stack.Screen name=\"ItemScreen\" component={ItemScreen} />\r\n          <Stack.Screen name=\"Map\" component={Map}/>\r\n          <Stack.Screen name=\"Login\" component={Login}/>\r\n        </Stack.Navigator>\r\n      </NavigationContainer>\r\n    </TailwindProvider>\r\n</>\r\n    \r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}