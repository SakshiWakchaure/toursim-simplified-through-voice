{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StyledComponent } from \"tailwindcss-react-native\";\nimport React, { useState } from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TailwindProvider } from \"tailwindcss-react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport Discover from \"./screens/Discover\";\nimport ItemScreen from \"./screens/ItemScreen\";\nimport Map from \"./screens/Map\";\nimport New from \"./screens/New\";\nimport { BrowserRouter, Router } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport 'react-native-gesture-handler';\nimport 'regenerator-runtime/runtime';\nimport Login from \"./screens/Login\";\nimport New_sign from \"./screens/New_sign\";\nimport Contact from \"./screens/Contact\";\nimport Speech from \"./screens/Speech\";\nimport { recognition } from \"./api/VoiceRecognization\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport { useLayoutEffect } from \"react\";\nimport { useRef } from \"react\";\nconsole.reportErrorsAsExceptions = false;\nvar Stack = createNativeStackNavigator();\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var navigate = useNavigate();\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    transcript = _useState2[0],\n    setTranscript = _useState2[1];\n  useEffect(function () {\n    var recognition = new window.webkitSpeechRecognition();\n    recognition.onresult = function (event) {\n      var last = event.results.length - 1;\n      var command = event.results[last][0].transcript;\n      setTranscript(command);\n    };\n    recognition.start();\n    return function () {\n      recognition.stop();\n    };\n  }, []);\n  useEffect(function () {\n    switch (transcript.toLowerCase()) {\n      case 'home':\n        history.push('/');\n        break;\n      case 'about':\n        history.push('/about');\n        break;\n      case 'contact':\n        history.push('/contact');\n        break;\n      default:\n        break;\n    }\n  }, [transcript, history]);\n  return _jsx(TailwindProvider, {\n    children: _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        children: [_jsx(Stack.Screen, {\n          name: \"Home\",\n          component: HomeScreen\n        }), _jsx(Stack.Screen, {\n          name: \"Discover\",\n          component: Discover\n        }), _jsx(Stack.Screen, {\n          name: \"ItemScreen\",\n          component: ItemScreen\n        }), _jsx(Stack.Screen, {\n          name: \"New\",\n          component: New\n        }), _jsx(Stack.Screen, {\n          name: \"Map\",\n          component: Map\n        }), _jsx(Stack.Screen, {\n          name: \"New_sign\",\n          component: New_sign\n        }), _jsx(Stack.Screen, {\n          name: \"Contact\",\n          component: Contact\n        }), _jsx(Stack.Screen, {\n          name: \"Speech\",\n          component: Speech\n        })]\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useState","StatusBar","SafeAreaView","Text","View","TailwindProvider","NavigationContainer","createNativeStackNavigator","HomeScreen","Discover","ItemScreen","Map","New","BrowserRouter","Router","Link","Login","New_sign","Contact","Speech","recognition","useNavigation","SpeechRecognition","useSpeechRecognition","useFocusEffect","useLayoutEffect","useRef","console","reportErrorsAsExceptions","Stack","useEffect","useNavigate","jsx","_jsx","jsxs","_jsxs","App","navigate","_useState","_useState2","_slicedToArray","transcript","setTranscript","window","webkitSpeechRecognition","onresult","event","last","results","length","command","start","stop","toLowerCase","history","push","children","Navigator","Screen","name","component"],"sources":["D:/xampp/htdocs/gotravel1/tourism simplified through voice/App.js"],"sourcesContent":["import React ,{useState} from \"react\";\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport { SafeAreaView, Text, View } from \"react-native\";\r\nimport { TailwindProvider } from \"tailwindcss-react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport HomeScreen from \"./screens/HomeScreen\";\r\nimport Discover from \"./screens/Discover\";\r\nimport ItemScreen from \"./screens/ItemScreen\";\r\nimport Map from \"./screens/Map\";\r\nimport New from \"./screens/New\";\r\nimport { BrowserRouter, Router} from \"react-router-dom\";\r\n//import Login from \"./screens/Login\";\r\nimport { Link } from \"react-router-dom\";\r\nimport 'react-native-gesture-handler';\r\nimport 'regenerator-runtime/runtime';\r\nimport Login from \"./screens/Login\";\r\nimport New_sign from \"./screens/New_sign\";\r\nimport Contact from \"./screens/Contact\";\r\nimport Speech from \"./screens/Speech\";\r\nimport { recognition } from \"./api/VoiceRecognization\";\r\n//import { useNavigation, redirect, Route, Routes } from \"react-router-dom\";\r\nimport { useNavigation} from \"@react-navigation/native\";\r\nimport SpeechRecognition,{useSpeechRecognition} from \"react-speech-recognition\";\r\nimport { useFocusEffect } from \"@react-navigation/native\";\r\nimport { useLayoutEffect } from \"react\";\r\n//import { Navigate, useNavigate } from \"react-router-dom\";\r\n//import {useHistory} from 'react-router-dom';\r\nimport { useRef } from \"react\";\r\nconsole.reportErrorsAsExceptions = false;\r\nconst Stack = createNativeStackNavigator();\r\nimport { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nexport default function App() {\r\n\r\n  // const navRef= useRef();\r\n  //const navigate = Navigate();\r\n // const navigation = useNavigation();\r\n  \r\n  // // useLayoutEffect(() => {\r\n  // //   navigate.setOptions({\r\n  // //     headerShown: false,\r\n  // //   });\r\n  // // }, []);\r\n      const navigate = useNavigate();\r\n      const [transcript, setTranscript] = useState('');\r\n  //     const [transcript, setTranscript] = useState('');\r\n\r\n  useEffect(() => {\r\n    const recognition = new window.webkitSpeechRecognition();\r\n    recognition.onresult = (event) => {\r\n      const last = event.results.length - 1;\r\n      const command = event.results[last][0].transcript;\r\n      setTranscript(command);\r\n    };\r\n\r\n    recognition.start();\r\n\r\n    return () => {\r\n      recognition.stop();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    switch (transcript.toLowerCase()) {\r\n      case 'home':\r\n        history.push('/');\r\n        break;\r\n      case 'about':\r\n        history.push('/about');\r\n        break;\r\n      case 'contact':\r\n        history.push('/contact');\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, [transcript, history]);\r\n\r\n\r\n\r\n  // console.log(recognition)\r\n  // recognition.start()\r\n\r\n  // recognition.onresult=(event)=>{\r\n  \r\n  //   const command =event.results[0][0].transcript;\r\n  //     console.log(command);\r\n    \r\n  //   if(command.includes(\"navigate to\") || command.includes(\"go to\")){\r\n      \r\n  //      if(command.includes(\"homepage\") || command.includes(\"indexpage\")){\r\n  //         //navigate.push(\"/HomeScreen\")\r\n  //          //navigate.push(\"/HomeScreen\")\r\n  //         //navigation.push()\r\n  //            console.log(command);\r\n  //       }\r\n  //       else if(command.includes(\"Discover\") || command.includes(\"Discover page\")){\r\n  //   //    navigate.push(\"/Discover\")\r\n  //             console.log(command);\r\n  //     }\r\n  //       else if(command.includes(\"Map\") || command.includes(\"Map page\")){\r\n  //   //    navigate.push(\"/Map\")\r\n  //             console.log(command);\r\n  //     }\r\n  //       else if(command.includes(\"Contact\") || command.includes(\"Contact page\")){\r\n  //   //    navigate.push(\"/Contact\")\r\n  //             console.log(command);\r\n  //     }\r\n  //       else if(command.includes(\"Sign up\") || command.includes(\"Sign up page\")){\r\n  //   //    navigate.push(\"/New\")\r\n  //             console.log(command);\r\n  //     }\r\n  //  }\r\n  // }\r\n\r\n  // recognition.onend=()=>{\r\n  //   recognition.start()\r\n\r\n  // }\r\n  return (\r\n    \r\n    <TailwindProvider>\r\n      <NavigationContainer>\r\n        <Stack.Navigator>\r\n                  \r\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\r\n          \r\n          <Stack.Screen name=\"Discover\" component={Discover} />\r\n         \r\n          <Stack.Screen name=\"ItemScreen\" component={ItemScreen} />\r\n          \r\n          <Stack.Screen name=\"New\" component={New}></Stack.Screen>\r\n          <Stack.Screen name=\"Map\" component={Map}/>\r\n          <Stack.Screen name=\"New_sign\" component={New_sign}></Stack.Screen>\r\n          <Stack.Screen name=\"Contact\" component={Contact}></Stack.Screen>\r\n          <Stack.Screen name=\"Speech\" component={Speech}></Stack.Screen>\r\n          \r\n          \r\n        </Stack.Navigator>\r\n      </NavigationContainer>\r\n    </TailwindProvider>\r\n\r\n\r\n  //   <BrowserRouter>\r\n  //   <Routes>\r\n  //   <Route path=\"HomeScreen\" exact element={<HomeScreen/>}/>\r\n  //   <Route path=\"Discover\" element={< Discover/>} />\r\n  //   <Route path=\"ItemScreen\" element={<ItemScreen/>} />\r\n  //   <Route path=\"New\" element={<New/>} />\r\n  //   <Route path=\"Map\"  element={<Map/>} />\r\n  //   <Route path=\"Login\" element={<Login/>} />\r\n  //   <Route path=\"New_sign\"element={<New_sign/>} />\r\n  //   <Route path=\"Contact\" element={<Contact/>} />\r\n  //   <Route path=\"Speech\" element={<Speech/>} />\r\n  //   </Routes>\r\n  // </BrowserRouter>\r\n\r\n    \r\n  );\r\n}\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import { StatusBar } from \"expo-status-bar\";\r\n// import { SafeAreaView, Text, View } from \"react-native\";\r\n// import { TailwindProvider } from \"tailwindcss-react-native\";\r\n// import { NavigationContainer } from \"@react-navigation/native\";\r\n// import { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\n// import HomeScreen from \"./screens/HomeScreen\";\r\n// import Discover from \"./screens/Discover\";\r\n// import ItemScreen from \"./screens/ItemScreen\";\r\n// import Map from \"./screens/Map\";\r\n// import New from \"./screens/New\";\r\n// import Login from \"./screens/Login\";\r\n// import New_sign from \"./screens/New_sign\";\r\n// import Contact from \"./screens/Contact\";\r\n// import Speech from \"./screens/Speech\";\r\n// import { recognition } from \"./api/VoiceRecognization\";\r\n// import { useFocusEffect, useNavigation } from \"@react-navigation/native\"; // Import useNavigation hook\r\n\r\n// import { useLayoutEffect } from \"react\";\r\n// import { Navigate, useNavigate } from \"react-router-dom\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// const Stack = createNativeStackNavigator();\r\n\r\n// export default function App() {\r\n//   console.log(recognition);\r\n//   recognition.start();\r\n\r\n//   const navigation = useNavigation(); // Use useNavigation hook at top level\r\n\r\n//   recognition.onresult = (event) => {\r\n//     const command = event.results[0][0].transcript;\r\n\r\n//     if (command.includes(\"navigate to\") || command.includes(\"go to\")) {\r\n//       if (command.includes(\"homepage\") || command.includes(\"indexpage\")) {\r\n//         navigateTo(\"Home\"); // Call navigateTo function\r\n//       } else if (command.includes(\"Discover\") || command.includes(\"Discover page\")) {\r\n//         navigateTo(\"Discover\"); // Call navigateTo function\r\n//       } else if (command.includes(\"Map\") || command.includes(\"Map page\")) {\r\n//         navigateTo(\"Map\"); // Call navigateTo function\r\n//       } else if (command.includes(\"Contact\") || command.includes(\"Contact page\")) {\r\n//         navigateTo(\"Contact\"); // Call navigateTo function\r\n//       } else if (command.includes(\"Sign up\") || command.includes(\"Sign up page\")) {\r\n//         navigateTo(\"New\"); // Call navigateTo function\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   recognition.onend = () => {\r\n//     recognition.start();\r\n//   };\r\n\r\n//   // Define navigateTo function\r\n//   const navigateTo =\r\n//     (navigation, screenName) => {\r\n//       navigation.navigate(screenName);\r\n//     }; // Use navigation object directly\r\n  \r\n\r\n//   return (\r\n//     <TailwindProvider>\r\n//       <NavigationContainer>\r\n//         <Stack.Navigator>\r\n//           <Stack.Screen name=\"Home\" component={HomeScreen} />\r\n//           <Stack.Screen name=\"Discover\" component={Discover} />\r\n//           <Stack.Screen name=\"ItemScreen\" component={ItemScreen} />\r\n//           <Stack.Screen name=\"New\" component={New}></Stack.Screen>\r\n//           <Stack.Screen name=\"Map\" component={Map} />\r\n//           <Stack.Screen name=\"New_sign\" component={New_sign}></Stack.Screen>\r\n//           <Stack.Screen name=\"Contact\" component={Contact}></Stack.Screen>\r\n//           <Stack.Screen name=\"Speech\" component={Speech}></Stack.Screen>\r\n//         </Stack.Navigator>\r\n//       </NavigationContainer>\r\n//     </TailwindProvider>\r\n//   );\r\n// }\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}