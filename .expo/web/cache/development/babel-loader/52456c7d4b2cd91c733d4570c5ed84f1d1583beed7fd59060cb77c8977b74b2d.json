{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { NativeReanimated } from \"../NativeReanimated/NativeReanimated\";\nimport { SensorType } from \"../commonTypes\";\nvar JSReanimated = function (_NativeReanimated) {\n  _inherits(JSReanimated, _NativeReanimated);\n  var _super = _createSuper(JSReanimated);\n  function JSReanimated() {\n    var _this;\n    _classCallCheck(this, JSReanimated);\n    _this = _super.call(this, false);\n    _defineProperty(_assertThisInitialized(_this), \"nextSensorId\", 0);\n    _defineProperty(_assertThisInitialized(_this), \"sensors\", new Map());\n    return _this;\n  }\n  _createClass(JSReanimated, [{\n    key: \"makeShareableClone\",\n    value: function makeShareableClone(value) {\n      return {\n        __hostObjectShareableJSRef: value\n      };\n    }\n  }, {\n    key: \"installCoreFunctions\",\n    value: function installCoreFunctions(_callGuard, _valueUnpacker) {}\n  }, {\n    key: \"scheduleOnUI\",\n    value: function scheduleOnUI(worklet) {\n      requestAnimationFrame(worklet);\n    }\n  }, {\n    key: \"registerEventHandler\",\n    value: function registerEventHandler(_eventHash, _eventHandler) {\n      return '';\n    }\n  }, {\n    key: \"unregisterEventHandler\",\n    value: function unregisterEventHandler(_) {}\n  }, {\n    key: \"enableLayoutAnimations\",\n    value: function enableLayoutAnimations() {\n      console.warn('[Reanimated] enableLayoutAnimations is not available for WEB yet');\n    }\n  }, {\n    key: \"registerSensor\",\n    value: function registerSensor(sensorType, interval, iosReferenceFrame, eventHandler) {\n      if (!(this.getSensorName(sensorType) in window)) {\n        return -1;\n      }\n      var sensor = this.initializeSensor(sensorType, interval);\n      var callback;\n      if (sensorType === SensorType.ROTATION) {\n        callback = function callback() {\n          var _sensor$quaternion = _slicedToArray(sensor.quaternion, 4),\n            qw = _sensor$quaternion[0],\n            qx = _sensor$quaternion[1],\n            qy = _sensor$quaternion[2],\n            qz = _sensor$quaternion[3];\n          var yaw = Math.atan2(2.0 * (qy * qz + qw * qx), qw * qw - qx * qx - qy * qy + qz * qz);\n          var pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n          var roll = Math.atan2(2.0 * (qx * qy + qw * qz), qw * qw + qx * qx - qy * qy - qz * qz);\n          eventHandler({\n            qw: qw,\n            qx: qx,\n            qy: qy,\n            qz: qz,\n            yaw: yaw,\n            pitch: pitch,\n            roll: roll,\n            interfaceOrientation: 0\n          });\n        };\n      } else {\n        callback = function callback() {\n          var x = sensor.x,\n            y = sensor.y,\n            z = sensor.z;\n          eventHandler({\n            x: x,\n            y: y,\n            z: z,\n            interfaceOrientation: 0\n          });\n        };\n      }\n      sensor.addEventListener('reading', callback);\n      sensor.start();\n      this.sensors.set(this.nextSensorId, sensor);\n      return this.nextSensorId++;\n    }\n  }, {\n    key: \"unregisterSensor\",\n    value: function unregisterSensor(id) {\n      var sensor = this.sensors.get(id);\n      if (sensor !== undefined) {\n        sensor.stop();\n        this.sensors.delete(id);\n      }\n    }\n  }, {\n    key: \"subscribeForKeyboardEvents\",\n    value: function subscribeForKeyboardEvents(_) {\n      console.warn('[Reanimated] useAnimatedKeyboard is not available on web yet.');\n      return -1;\n    }\n  }, {\n    key: \"unsubscribeFromKeyboardEvents\",\n    value: function unsubscribeFromKeyboardEvents(_) {}\n  }, {\n    key: \"initializeSensor\",\n    value: function initializeSensor(sensorType, interval) {\n      var config = interval <= 0 ? {\n        referenceFrame: 'device'\n      } : {\n        frequency: 1000 / interval\n      };\n      switch (sensorType) {\n        case SensorType.ACCELEROMETER:\n          return new window.Accelerometer(config);\n        case SensorType.GYROSCOPE:\n          return new window.Gyroscope(config);\n        case SensorType.GRAVITY:\n          return new window.GravitySensor(config);\n        case SensorType.MAGNETIC_FIELD:\n          return new window.Magnetometer(config);\n        case SensorType.ROTATION:\n          return new window.AbsoluteOrientationSensor(config);\n      }\n    }\n  }, {\n    key: \"getSensorName\",\n    value: function getSensorName(sensorType) {\n      switch (sensorType) {\n        case SensorType.ACCELEROMETER:\n          return 'Accelerometer';\n        case SensorType.GRAVITY:\n          return 'GravitySensor';\n        case SensorType.GYROSCOPE:\n          return 'Gyroscope';\n        case SensorType.MAGNETIC_FIELD:\n          return 'Magnetometer';\n        case SensorType.ROTATION:\n          return 'AbsoluteOrientationSensor';\n      }\n    }\n  }]);\n  return JSReanimated;\n}(NativeReanimated);\nexport { JSReanimated as default };","map":{"version":3,"names":["NativeReanimated","SensorType","JSReanimated","_NativeReanimated","_inherits","_super","_createSuper","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","Map","_createClass","key","value","makeShareableClone","__hostObjectShareableJSRef","installCoreFunctions","_callGuard","_valueUnpacker","scheduleOnUI","worklet","requestAnimationFrame","registerEventHandler","_eventHash","_eventHandler","unregisterEventHandler","_","enableLayoutAnimations","console","warn","registerSensor","sensorType","interval","iosReferenceFrame","eventHandler","getSensorName","window","sensor","initializeSensor","callback","ROTATION","_sensor$quaternion","_slicedToArray","quaternion","qw","qx","qy","qz","yaw","Math","atan2","pitch","sin","roll","interfaceOrientation","x","y","z","addEventListener","start","sensors","set","nextSensorId","unregisterSensor","id","get","undefined","stop","delete","subscribeForKeyboardEvents","unsubscribeFromKeyboardEvents","config","referenceFrame","frequency","ACCELEROMETER","Accelerometer","GYROSCOPE","Gyroscope","GRAVITY","GravitySensor","MAGNETIC_FIELD","Magnetometer","AbsoluteOrientationSensor","default"],"sources":["C:\\Project\\toursim-simplified-through-voice-master\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\js-reanimated\\JSReanimated.ts"],"sourcesContent":["import { NativeReanimated } from '../NativeReanimated/NativeReanimated';\nimport {\n  SensorType,\n  ShareableRef,\n  Value3D,\n  ValueRotation,\n} from '../commonTypes';\nimport { WebSensor } from './WebSensor';\n\nexport default class JSReanimated extends NativeReanimated {\n  nextSensorId = 0;\n  sensors = new Map<number, WebSensor>();\n\n  constructor() {\n    super(false);\n  }\n\n  makeShareableClone<T>(value: T): ShareableRef<T> {\n    return { __hostObjectShareableJSRef: value };\n  }\n\n  installCoreFunctions(\n    _callGuard: <T extends Array<any>, U>(\n      fn: (...args: T) => U,\n      ...args: T\n    ) => void,\n    _valueUnpacker: <T>(value: T) => T\n  ): void {\n    // noop\n  }\n\n  scheduleOnUI<T>(worklet: ShareableRef<T>) {\n    // @ts-ignore web implementation has still not been updated after the rewrite, this will be addressed once the web implementation updates are ready\n    requestAnimationFrame(worklet);\n  }\n\n  registerEventHandler<T>(\n    _eventHash: string,\n    _eventHandler: ShareableRef<T>\n  ): string {\n    // noop\n    return '';\n  }\n\n  unregisterEventHandler(_: string): void {\n    // noop\n  }\n\n  enableLayoutAnimations() {\n    console.warn(\n      '[Reanimated] enableLayoutAnimations is not available for WEB yet'\n    );\n  }\n\n  registerSensor(\n    sensorType: SensorType,\n    interval: number,\n    iosReferenceFrame: number,\n    eventHandler: (data: Value3D | ValueRotation) => void\n  ): number {\n    if (!(this.getSensorName(sensorType) in window)) {\n      return -1;\n    }\n\n    const sensor: WebSensor = this.initializeSensor(sensorType, interval);\n    let callback;\n    if (sensorType === SensorType.ROTATION) {\n      callback = () => {\n        const [qw, qx, qy, qz] = sensor.quaternion;\n\n        // reference: https://stackoverflow.com/questions/5782658/extracting-yaw-from-a-quaternion\n        const yaw = Math.atan2(\n          2.0 * (qy * qz + qw * qx),\n          qw * qw - qx * qx - qy * qy + qz * qz\n        );\n        const pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n        const roll = Math.atan2(\n          2.0 * (qx * qy + qw * qz),\n          qw * qw + qx * qx - qy * qy - qz * qz\n        );\n        eventHandler({\n          qw,\n          qx,\n          qy,\n          qz,\n          yaw,\n          pitch,\n          roll,\n          interfaceOrientation: 0,\n        });\n      };\n    } else {\n      callback = () => {\n        const { x, y, z } = sensor;\n        eventHandler({ x, y, z, interfaceOrientation: 0 });\n      };\n    }\n    sensor.addEventListener('reading', callback);\n    sensor.start();\n\n    this.sensors.set(this.nextSensorId, sensor);\n    return this.nextSensorId++;\n  }\n\n  unregisterSensor(id: number): void {\n    const sensor: WebSensor | undefined = this.sensors.get(id);\n    if (sensor !== undefined) {\n      sensor.stop();\n      this.sensors.delete(id);\n    }\n  }\n\n  subscribeForKeyboardEvents(_: ShareableRef<number>): number {\n    console.warn(\n      '[Reanimated] useAnimatedKeyboard is not available on web yet.'\n    );\n    return -1;\n  }\n\n  unsubscribeFromKeyboardEvents(_: number): void {\n    // noop\n  }\n\n  initializeSensor(sensorType: SensorType, interval: number): WebSensor {\n    const config =\n      interval <= 0\n        ? { referenceFrame: 'device' }\n        : { frequency: 1000 / interval };\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return new window.Accelerometer(config);\n      case SensorType.GYROSCOPE:\n        return new window.Gyroscope(config);\n      case SensorType.GRAVITY:\n        return new window.GravitySensor(config);\n      case SensorType.MAGNETIC_FIELD:\n        return new window.Magnetometer(config);\n      case SensorType.ROTATION:\n        return new window.AbsoluteOrientationSensor(config);\n    }\n  }\n\n  getSensorName(sensorType: SensorType): string {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return 'Accelerometer';\n      case SensorType.GRAVITY:\n        return 'GravitySensor';\n      case SensorType.GYROSCOPE:\n        return 'Gyroscope';\n      case SensorType.MAGNETIC_FIELD:\n        return 'Magnetometer';\n      case SensorType.ROTATION:\n        return 'AbsoluteOrientationSensor';\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}