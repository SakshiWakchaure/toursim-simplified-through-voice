{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"children\", \"screenListeners\", \"screenOptions\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, StackActions, StackRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport NativeStackView from \"../views/NativeStackView\";\nfunction NativeStackNavigator(_ref) {\n  var id = _ref.id,\n    initialRouteName = _ref.initialRouteName,\n    children = _ref.children,\n    screenListeners = _ref.screenListeners,\n    screenOptions = _ref.screenOptions,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useNavigationBuilder = useNavigationBuilder(StackRouter, {\n      id: id,\n      initialRouteName: initialRouteName,\n      children: children,\n      screenListeners: screenListeners,\n      screenOptions: screenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  React.useEffect(function () {\n    var _navigation$addListen;\n    return navigation === null || navigation === void 0 ? void 0 : (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(NavigationContent, null, React.createElement(NativeStackView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  })));\n}\nexport default createNavigatorFactory(NativeStackNavigator);","map":{"version":3,"names":["createNavigatorFactory","StackActions","StackRouter","useNavigationBuilder","React","NativeStackView","NativeStackNavigator","_ref","id","initialRouteName","children","screenListeners","screenOptions","rest","_objectWithoutProperties","_excluded","_useNavigationBuilder","state","descriptors","navigation","NavigationContent","useEffect","_navigation$addListen","addListener","call","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","_objectSpread","popToTop","target","key","createElement","_extends"],"sources":["D:\\xampp\\htdocs\\gotravel1\\travel-advisor-react-native-app-oct-06-22\\node_modules\\@react-navigation\\native-stack\\lib\\module\\navigators\\createNativeStackNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  id,\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      NativeStackNavigationOptions,\n      NativeStackNavigationEventMap\n    >(StackRouter, {\n      id,\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      // @ts-expect-error: there may not be a tab navigator in parent\n      navigation?.addListener?.('tabPress', (e: any) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <NativeStackView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SACEA,sBADF,EAKEC,YALF,EAOEC,WAPF,EASEC,oBATF,QAUO,0BAVP;AAWA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAOA,OAAOC,eAAP;AAEA,SAASC,oBAATA,CAAAC,IAAA,EAO8B;EAAA,IAN5BC,EAD4B,GAOAD,IAAA,CAN5BC,EAD4B;IAE5BC,gBAF4B,GAOAF,IAAA,CAL5BE,gBAF4B;IAG5BC,QAH4B,GAOAH,IAAA,CAJ5BG,QAH4B;IAI5BC,eAJ4B,GAOAJ,IAAA,CAH5BI,eAJ4B;IAK5BC,aAL4B,GAOAL,IAAA,CAF5BK,aAL4B;IAMzBC,IAAA,GAAAC,wBAAA,CACyBP,IAAA,EAAAQ,SAAA;EAC5B,IAAAC,qBAAA,GACEb,oBAAoB,CAMlBD,WANkB,EAML;MACbM,EADa,EACbA,EADa;MAEbC,gBAFa,EAEbA,gBAFa;MAGbC,QAHa,EAGbA,QAHa;MAIbC,eAJa,EAIbA,eAJa;MAKbC,aAAA,EAAAA;IALa,CANK,CADtB;IAAQK,KAAF,GAAAD,qBAAA,CAAEC,KAAF;IAASC,WAAT,GAAAF,qBAAA,CAASE,WAAT;IAAsBC,UAAtB,GAAAH,qBAAA,CAAsBG,UAAtB;IAAkCC,iBAAA,GAAAJ,qBAAA,CAAAI,iBAAA;EAexChB,KAAK,CAACiB,SAAN,CACE;IAAA,IAAAC,qBAAA;IAAA,OAEEH,UAFF,aAEEA,UAFF,wBAAAG,qBAAA,GAEEH,UAAU,CAAEI,WAFd,cAAAD,qBAAA,uBAEEA,qBAAA,CAAAE,IAAA,CAAAL,UAAU,EAAgB,UAAhB,EAA6B,UAAAM,CAAD,EAAY;MAChD,IAAMC,SAAS,GAAGP,UAAU,CAACO,SAAX,EAAlB;MAIAC,qBAAqB,CAAC,YAAM;QAC1B,IACEV,KAAK,CAACW,KAAN,GAAc,CAAd,IACAF,SADA,IAEA,CAAED,CAAD,CAAkCI,gBAHrC,EAIE;UAGAV,UAAU,CAACW,QAAX,CAAAC,aAAA,CAAAA,aAAA,KACK9B,YAAY,CAAC+B,QAAb,EADe;YAElBC,MAAM,EAAEhB,KAAK,CAACiB;UAAA,GAFhB;QAID;MACF,CAboB,CAArB;IAcD,CAnBS;EAFZ,CADF,EAuBE,CAACf,UAAD,EAAaF,KAAK,CAACW,KAAnB,EAA0BX,KAAK,CAACiB,GAAhC,CAvBF;EA0BA,OACE9B,KAAA,CAAA+B,aAAA,CAACf,iBAAD,QACEhB,KAAA,CAAA+B,aAAA,CAAC9B,eAAD,EAAA+B,QAAA,KACMvB,IADN;IAEEI,KAAK,EAAEA,KAFT;IAGEE,UAAU,EAAEA,UAHd;IAIED,WAAW,EAAEA;EAJf,GADF,CADF;AAUD;AAED,eAAelB,sBAAsB,CAKnCM,oBALmC,CAArC"},"metadata":{},"sourceType":"module","externalDependencies":[]}