{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { findFocusedRoute, getActionFromState as getActionFromStateDefault, getPathFromState as getPathFromStateDefault, getStateFromPath as getStateFromPathDefault } from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\nimport createMemoryHistory from \"./createMemoryHistory\";\nimport ServerContext from \"./ServerContext\";\nvar findMatchingState = function findMatchingState(a, b) {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n  var aHistoryLength = a.history ? a.history.length : a.routes.length;\n  var bHistoryLength = b.history ? b.history.length : b.routes.length;\n  var aRoute = a.routes[a.index];\n  var bRoute = b.routes[b.index];\n  var aChildState = aRoute.state;\n  var bChildState = bRoute.state;\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n  return findMatchingState(aChildState, bChildState);\n};\nvar series = function series(cb) {\n  var handling = false;\n  var queue = [];\n  var callback = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        if (handling) {\n          queue.unshift(callback);\n          return;\n        }\n        handling = true;\n        yield cb();\n      } finally {\n        handling = false;\n        if (queue.length) {\n          var last = queue.pop();\n          last === null || last === void 0 ? void 0 : last();\n        }\n      }\n    });\n    return function callback() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return callback;\n};\nvar linkingHandlers = [];\nexport default function useLinking(ref, _ref) {\n  var independent = _ref.independent,\n    _ref$enabled = _ref.enabled,\n    enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n    config = _ref.config,\n    _ref$getStateFromPath = _ref.getStateFromPath,\n    getStateFromPath = _ref$getStateFromPath === void 0 ? getStateFromPathDefault : _ref$getStateFromPath,\n    _ref$getPathFromState = _ref.getPathFromState,\n    getPathFromState = _ref$getPathFromState === void 0 ? getPathFromStateDefault : _ref$getPathFromState,\n    _ref$getActionFromSta = _ref.getActionFromState,\n    getActionFromState = _ref$getActionFromSta === void 0 ? getActionFromStateDefault : _ref$getActionFromSta;\n  React.useEffect(function () {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n    if (independent) {\n      return undefined;\n    }\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n    var handler = Symbol();\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n    return function () {\n      var index = linkingHandlers.indexOf(handler);\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  var _React$useState = React.useState(createMemoryHistory),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    history = _React$useState2[0];\n  var enabledRef = React.useRef(enabled);\n  var configRef = React.useRef(config);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getPathFromStateRef = React.useRef(getPathFromState);\n  var getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(function () {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  var server = React.useContext(ServerContext);\n  var getInitialState = React.useCallback(function () {\n    var value;\n    if (enabledRef.current) {\n      var _server$location;\n      var _location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      var path = _location ? _location.pathname + _location.search : undefined;\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n    var thenable = {\n      then: function then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch: function _catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  var previousIndexRef = React.useRef(undefined);\n  var previousStateRef = React.useRef(undefined);\n  var pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(function () {\n    previousIndexRef.current = history.index;\n    return history.listen(function () {\n      var _previousIndexRef$cur;\n      var navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      var path = location.pathname + location.search;\n      var index = history.index;\n      var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      var record = history.get(index);\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n      var state = getStateFromPathRef.current(path, configRef.current);\n      if (state) {\n        var rootState = navigation.getRootState();\n        if (state.routes.some(function (r) {\n          return !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name));\n        })) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n        if (index > previousIndex) {\n          var action = getActionFromStateRef.current(state, configRef.current);\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(\"An error occurred when trying to handle the link '\" + path + \"': \" + (typeof e === 'object' && e != null && 'message' in e ? e.message : e));\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(function () {\n    var _ref$current;\n    if (!enabled) {\n      return;\n    }\n    var getPathForRoute = function getPathForRoute(route, state) {\n      if (route !== null && route !== void 0 && route.path) {\n        var stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n        if (stateForPath) {\n          var focusedRoute = findFocusedRoute(stateForPath);\n          if (focusedRoute && focusedRoute.name === route.name && isEqual(focusedRoute.params, route.params)) {\n            return route.path;\n          }\n        }\n      }\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n    if (ref.current) {\n      var state = ref.current.getRootState();\n      if (state) {\n        var route = findFocusedRoute(state);\n        var path = getPathForRoute(route, state);\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n        history.replace({\n          path: path,\n          state: state\n        });\n      }\n    }\n    var onStateChange = function () {\n      var _ref3 = _asyncToGenerator(function* () {\n        var navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        var previousState = previousStateRef.current;\n        var state = navigation.getRootState();\n        if (!state) {\n          return;\n        }\n        var pendingPath = pendingPopStatePathRef.current;\n        var route = findFocusedRoute(state);\n        var path = getPathForRoute(route, state);\n        previousStateRef.current = state;\n        pendingPopStatePathRef.current = undefined;\n        var _findMatchingState = findMatchingState(previousState, state),\n          _findMatchingState2 = _slicedToArray(_findMatchingState, 2),\n          previousFocusedState = _findMatchingState2[0],\n          focusedState = _findMatchingState2[1];\n        if (previousFocusedState && focusedState && path !== pendingPath) {\n          var historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n          if (historyDelta > 0) {\n            history.push({\n              path: path,\n              state: state\n            });\n          } else if (historyDelta < 0) {\n            var nextIndex = history.backIndex({\n              path: path\n            });\n            var currentIndex = history.index;\n            try {\n              if (nextIndex !== -1 && nextIndex < currentIndex) {\n                yield history.go(nextIndex - currentIndex);\n              } else {\n                yield history.go(historyDelta);\n              }\n              history.replace({\n                path: path,\n                state: state\n              });\n            } catch (e) {}\n          } else {\n            history.replace({\n              path: path,\n              state: state\n            });\n          }\n        } else {\n          history.replace({\n            path: path,\n            state: state\n          });\n        }\n      });\n      return function onStateChange() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState: getInitialState\n  };\n}","map":{"version":3,"names":["findFocusedRoute","getActionFromState","getActionFromStateDefault","getPathFromState","getPathFromStateDefault","getStateFromPath","getStateFromPathDefault","isEqual","React","createMemoryHistory","ServerContext","findMatchingState","a","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","handling","queue","callback","_ref2","_asyncToGenerator","unshift","last","pop","apply","arguments","linkingHandlers","useLinking","ref","_ref","independent","_ref$enabled","enabled","config","_ref$getStateFromPath","_ref$getPathFromState","_ref$getActionFromSta","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","push","indexOf","splice","_React$useState","useState","_React$useState2","_slicedToArray","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","server","useContext","getInitialState","useCallback","value","_server$location","location","window","path","pathname","search","thenable","then","onfulfilled","Promise","resolve","catch","_catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","_previousIndexRef$cur","navigation","previousIndex","record","get","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","warn","action","dispatch","e","message","_ref$current","getPathForRoute","route","stateForPath","focusedRoute","params","replace","onStateChange","_ref3","previousState","pendingPath","_findMatchingState","_findMatchingState2","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","addListener"],"sources":["D:\\xampp\\htdocs\\gotravel1\\toursim-simplified-through-voice-master\\toursim-simplified-through-voice-master\\node_modules\\@react-navigation\\native\\lib\\module\\useLinking.tsx"],"sourcesContent":["import {\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\n\nimport createMemoryHistory from './createMemoryHistory';\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e\n                    ? // @ts-expect-error: we're already checking for this\n                      e.message\n                    : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(\n          route.path,\n          configRef.current\n        );\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual(focusedRoute.params, route.params)\n          ) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}