{"ast":null,"code":"import { StyledComponent } from \"tailwindcss-react-native\";\nimport React, { useState } from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TailwindProvider } from \"tailwindcss-react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport Discover from \"./screens/Discover\";\nimport ItemScreen from \"./screens/ItemScreen\";\nimport Map from \"./screens/Map\";\nimport New from \"./screens/New\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport 'react-native-gesture-handler';\nimport 'regenerator-runtime/runtime';\nimport Login from \"./screens/Login\";\nimport New_sign from \"./screens/New_sign\";\nimport Contact from \"./screens/Contact\";\nimport Speech from \"./screens/Speech\";\nimport { recognition } from \"./api/VoiceRecognization\";\nimport { useNavigation, redirect, Route, Routes } from \"react-router-dom\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport { useLayoutEffect } from \"react\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\nimport { useHistory } from 'react-router-dom';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  console.log(recognition);\n  recognition.start();\n  recognition.onresult = function (event) {\n    var command = event.results[0][0].transcript;\n    if (command.includes(\"navigate to\") || command.includes(\"go to\")) {\n      if (command.includes(\"homepage\") || command.includes(\"indexpage\")) {\n        console.log(command);\n      } else if (command.includes(\"Discover\") || command.includes(\"Discover page\")) {\n        console.log(command);\n      } else if (command.includes(\"Map\") || command.includes(\"Map page\")) {\n        console.log(command);\n      } else if (command.includes(\"Contact\") || command.includes(\"Contact page\")) {\n        console.log(command);\n      } else if (command.includes(\"Sign up\") || command.includes(\"Sign up page\")) {\n        console.log(command);\n      }\n    }\n  };\n  recognition.onend = function () {\n    recognition.start();\n  };\n  return _jsx(BrowserRouter, {\n    children: _jsxs(Routes, {\n      children: [_jsx(Route, {\n        path: \"/HomeScreen\",\n        exact: true,\n        component: HomeScreen\n      }), _jsx(Route, {\n        path: \"/Discover\",\n        component: Discover\n      }), _jsx(Route, {\n        path: \"/item/:id\",\n        component: ItemScreen\n      }), _jsx(Route, {\n        path: \"/new\",\n        component: New\n      }), _jsx(Route, {\n        path: \"/map\",\n        component: Map\n      }), _jsx(Route, {\n        path: \"/login\",\n        component: Login\n      }), _jsx(Route, {\n        path: \"/new_sign\",\n        component: New_sign\n      }), _jsx(Route, {\n        path: \"/contact\",\n        component: Contact\n      }), _jsx(Route, {\n        path: \"/speech\",\n        component: Speech\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","useState","StatusBar","SafeAreaView","Text","View","TailwindProvider","NavigationContainer","createNativeStackNavigator","HomeScreen","Discover","ItemScreen","Map","New","BrowserRouter","Login","New_sign","Contact","Speech","recognition","useNavigation","redirect","Route","Routes","SpeechRecognition","useSpeechRecognition","useFocusEffect","useLayoutEffect","Navigate","useNavigate","useHistory","jsx","_jsx","jsxs","_jsxs","Stack","App","console","log","start","onresult","event","command","results","transcript","includes","onend","children","path","exact","component"],"sources":["D:/xampp/htdocs/gotravel1/tourism simplified through voice/App.js"],"sourcesContent":["import React ,{useState} from \"react\";\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport { SafeAreaView, Text, View } from \"react-native\";\r\nimport { TailwindProvider } from \"tailwindcss-react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport HomeScreen from \"./screens/HomeScreen\";\r\nimport Discover from \"./screens/Discover\";\r\nimport ItemScreen from \"./screens/ItemScreen\";\r\nimport Map from \"./screens/Map\";\r\nimport New from \"./screens/New\";\r\nimport { BrowserRouter} from \"react-router-dom\";\r\n//import Login from \"./screens/Login\";\r\nimport 'react-native-gesture-handler';\r\nimport 'regenerator-runtime/runtime';\r\nimport Login from \"./screens/Login\";\r\nimport New_sign from \"./screens/New_sign\";\r\nimport Contact from \"./screens/Contact\";\r\nimport Speech from \"./screens/Speech\";\r\nimport { recognition } from \"./api/VoiceRecognization\";\r\nimport { useNavigation, redirect, Route, Routes } from \"react-router-dom\";\r\n//import { Link, useNavigation} from \"@react-navigation/native\";\r\nimport SpeechRecognition,{useSpeechRecognition} from \"react-speech-recognition\";\r\nimport { useFocusEffect } from \"@react-navigation/native\";\r\nimport { useLayoutEffect } from \"react\";\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\nimport {useHistory} from 'react-router-dom';\r\nconst Stack = createNativeStackNavigator();\r\n\r\n\r\nexport default function App() {\r\n  //const navigate = Navigate();\r\n // const navigation = useNavigation();\r\n  \r\n  // // useLayoutEffect(() => {\r\n  // //   navigate.setOptions({\r\n  // //     headerShown: false,\r\n  // //   });\r\n  // // }, []);\r\n\r\n\r\n  console.log(recognition)\r\n  recognition.start()\r\n\r\n  recognition.onresult=(event)=>{\r\n  \r\n    const command =event.results[0][0].transcript;\r\n    //console.log(command);\r\n    \r\n    if(command.includes(\"navigate to\") || command.includes(\"go to\")){\r\n      \r\n       if(command.includes(\"homepage\") || command.includes(\"indexpage\")){\r\n          //navigate.push(\"/HomeScreen\")\r\n           //navigate.push(\"/HomeScreen\")\r\n          //navigation.push()\r\n             console.log(command);\r\n        }\r\n        else if(command.includes(\"Discover\") || command.includes(\"Discover page\")){\r\n    //    navigate.push(\"/Discover\")\r\n              console.log(command);\r\n      }\r\n        else if(command.includes(\"Map\") || command.includes(\"Map page\")){\r\n    //    navigate.push(\"/Map\")\r\n              console.log(command);\r\n      }\r\n        else if(command.includes(\"Contact\") || command.includes(\"Contact page\")){\r\n    //    navigate.push(\"/Contact\")\r\n              console.log(command);\r\n      }\r\n        else if(command.includes(\"Sign up\") || command.includes(\"Sign up page\")){\r\n    //    navigate.push(\"/New\")\r\n              console.log(command);\r\n      }\r\n   }\r\n  }\r\n\r\n  recognition.onend=()=>{\r\n    recognition.start()\r\n\r\n  }\r\n  return (\r\n    \r\n    // <TailwindProvider>\r\n    //   <NavigationContainer>\r\n    //     <Stack.Navigator>\r\n          \r\n    //       <Stack.Screen name=\"Home\" component={HomeScreen} />\r\n          \r\n    //       <Stack.Screen name=\"Discover\" component={Discover} />\r\n         \r\n    //       <Stack.Screen name=\"ItemScreen\" component={ItemScreen} />\r\n          \r\n    //       <Stack.Screen name=\"New\" component={New}></Stack.Screen>\r\n    //       <Stack.Screen name=\"Map\" component={Map}/>\r\n    //       <Stack.Screen name=\"New_sign\" component={New_sign}></Stack.Screen>\r\n    //       <Stack.Screen name=\"Contact\" component={Contact}></Stack.Screen>\r\n    //       <Stack.Screen name=\"Speech\" component={Speech}></Stack.Screen>\r\n          \r\n          \r\n          \r\n    //     </Stack.Navigator>\r\n    //   </NavigationContainer>\r\n    // </TailwindProvider>\r\n    <BrowserRouter>\r\n    <Routes>\r\n    <Route path=\"/HomeScreen\" exact component={HomeScreen} />\r\n    <Route path=\"/Discover\" component={Discover} />\r\n    <Route path=\"/item/:id\" component={ItemScreen} />\r\n    <Route path=\"/new\" component={New} />\r\n    <Route path=\"/map\" component={Map} />\r\n    <Route path=\"/login\" component={Login} />\r\n    <Route path=\"/new_sign\" component={New_sign} />\r\n    <Route path=\"/contact\" component={Contact} />\r\n    <Route path=\"/speech\" component={Speech} />\r\n    </Routes>\r\n  </BrowserRouter>\r\n\r\n    \r\n  );\r\n}\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import { StatusBar } from \"expo-status-bar\";\r\n// import { SafeAreaView, Text, View } from \"react-native\";\r\n// import { TailwindProvider } from \"tailwindcss-react-native\";\r\n// import { NavigationContainer } from \"@react-navigation/native\";\r\n// import { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\n// import HomeScreen from \"./screens/HomeScreen\";\r\n// import Discover from \"./screens/Discover\";\r\n// import ItemScreen from \"./screens/ItemScreen\";\r\n// import Map from \"./screens/Map\";\r\n// import New from \"./screens/New\";\r\n// import Login from \"./screens/Login\";\r\n// import New_sign from \"./screens/New_sign\";\r\n// import Contact from \"./screens/Contact\";\r\n// import Speech from \"./screens/Speech\";\r\n// import { recognition } from \"./api/VoiceRecognization\";\r\n// import { useFocusEffect, useNavigation } from \"@react-navigation/native\"; // Import useNavigation hook\r\n\r\n// import { useLayoutEffect } from \"react\";\r\n// import { Navigate, useNavigate } from \"react-router-dom\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// const Stack = createNativeStackNavigator();\r\n\r\n// export default function App() {\r\n//   console.log(recognition);\r\n//   recognition.start();\r\n\r\n//   const navigation = useNavigation(); // Use useNavigation hook at top level\r\n\r\n//   recognition.onresult = (event) => {\r\n//     const command = event.results[0][0].transcript;\r\n\r\n//     if (command.includes(\"navigate to\") || command.includes(\"go to\")) {\r\n//       if (command.includes(\"homepage\") || command.includes(\"indexpage\")) {\r\n//         navigateTo(\"Home\"); // Call navigateTo function\r\n//       } else if (command.includes(\"Discover\") || command.includes(\"Discover page\")) {\r\n//         navigateTo(\"Discover\"); // Call navigateTo function\r\n//       } else if (command.includes(\"Map\") || command.includes(\"Map page\")) {\r\n//         navigateTo(\"Map\"); // Call navigateTo function\r\n//       } else if (command.includes(\"Contact\") || command.includes(\"Contact page\")) {\r\n//         navigateTo(\"Contact\"); // Call navigateTo function\r\n//       } else if (command.includes(\"Sign up\") || command.includes(\"Sign up page\")) {\r\n//         navigateTo(\"New\"); // Call navigateTo function\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   recognition.onend = () => {\r\n//     recognition.start();\r\n//   };\r\n\r\n//   // Define navigateTo function\r\n//   const navigateTo =\r\n//     (navigation, screenName) => {\r\n//       navigation.navigate(screenName);\r\n//     }; // Use navigation object directly\r\n  \r\n\r\n//   return (\r\n//     <TailwindProvider>\r\n//       <NavigationContainer>\r\n//         <Stack.Navigator>\r\n//           <Stack.Screen name=\"Home\" component={HomeScreen} />\r\n//           <Stack.Screen name=\"Discover\" component={Discover} />\r\n//           <Stack.Screen name=\"ItemScreen\" component={ItemScreen} />\r\n//           <Stack.Screen name=\"New\" component={New}></Stack.Screen>\r\n//           <Stack.Screen name=\"Map\" component={Map} />\r\n//           <Stack.Screen name=\"New_sign\" component={New_sign}></Stack.Screen>\r\n//           <Stack.Screen name=\"Contact\" component={Contact}></Stack.Screen>\r\n//           <Stack.Screen name=\"Speech\" component={Speech}></Stack.Screen>\r\n//         </Stack.Navigator>\r\n//       </NavigationContainer>\r\n//     </TailwindProvider>\r\n//   );\r\n// }\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}