{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StyledComponent } from \"tailwindcss-react-native\";\nimport React, { useState } from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TailwindProvider } from \"tailwindcss-react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport Discover from \"./screens/Discover\";\nimport ItemScreen from \"./screens/ItemScreen\";\nimport Map from \"./screens/Map\";\nimport New from \"./screens/New\";\nimport { BrowserRouter, Router } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport 'react-native-gesture-handler';\nimport 'regenerator-runtime/runtime';\nimport Login from \"./screens/Login\";\nimport New_sign from \"./screens/New_sign\";\nimport Contact from \"./screens/Contact\";\nimport Speech from \"./screens/Speech\";\nimport { recognition } from \"./api/VoiceRecognization\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport { useLayoutEffect } from \"react\";\nimport { useRef } from \"react\";\nconsole.reportErrorsAsExceptions = false;\nvar Stack = createNativeStackNavigator();\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    transcript = _useState2[0],\n    setTranscript = _useState2[1];\n  useEffect(function () {\n    recognition.onresult = function (event) {\n      var last = event.results.length - 1;\n      var command = event.results[last][0].transcript;\n      setTranscript(command);\n      console.log(command);\n    };\n    recognition.start();\n    return function () {\n      recognition.stop();\n    };\n  }, []);\n  useEffect(function () {\n    switch (transcript.toLowerCase()) {\n      case 'home':\n        break;\n      case 'Discover':\n        break;\n      case 'Map':\n        break;\n      case 'contact':\n        break;\n      case 'login':\n        break;\n      default:\n        break;\n    }\n  }, [transcript]);\n  return _jsx(TailwindProvider, {\n    children: _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        children: [_jsx(Stack.Screen, {\n          name: \"Home\",\n          component: HomeScreen\n        }), _jsx(Stack.Screen, {\n          name: \"Discover\",\n          component: Discover\n        }), _jsx(Stack.Screen, {\n          name: \"ItemScreen\",\n          component: ItemScreen\n        }), _jsx(Stack.Screen, {\n          name: \"New\",\n          component: New\n        }), _jsx(Stack.Screen, {\n          name: \"Map\",\n          component: Map\n        }), _jsx(Stack.Screen, {\n          name: \"New_sign\",\n          component: New_sign\n        }), _jsx(Stack.Screen, {\n          name: \"Contact\",\n          component: Contact\n        }), _jsx(Stack.Screen, {\n          name: \"Speech\",\n          component: Speech\n        })]\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useState","StatusBar","SafeAreaView","Text","View","TailwindProvider","NavigationContainer","createNativeStackNavigator","HomeScreen","Discover","ItemScreen","Map","New","BrowserRouter","Router","Link","Login","New_sign","Contact","Speech","recognition","useNavigation","SpeechRecognition","useSpeechRecognition","useFocusEffect","useLayoutEffect","useRef","console","reportErrorsAsExceptions","Stack","useEffect","useNavigate","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","transcript","setTranscript","onresult","event","last","results","length","command","log","start","stop","toLowerCase","children","Navigator","Screen","name","component"],"sources":["C:/Project/toursim-simplified-through-voice-master/App.js"],"sourcesContent":["import React ,{useState} from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { SafeAreaView, Text, View } from \"react-native\";\nimport { TailwindProvider } from \"tailwindcss-react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport Discover from \"./screens/Discover\";\nimport ItemScreen from \"./screens/ItemScreen\";\nimport Map from \"./screens/Map\";\nimport New from \"./screens/New\";\nimport { BrowserRouter, Router} from \"react-router-dom\";\n//import Login from \"./screens/Login\";\nimport { Link } from \"react-router-dom\";\nimport 'react-native-gesture-handler';\nimport 'regenerator-runtime/runtime';\nimport Login from \"./screens/Login\";\nimport New_sign from \"./screens/New_sign\";\nimport Contact from \"./screens/Contact\";\nimport Speech from \"./screens/Speech\";\nimport { recognition } from \"./api/VoiceRecognization\";\n//import { useNavigation, redirect, Route, Routes } from \"react-router-dom\";\nimport { useNavigation} from \"@react-navigation/native\";\nimport SpeechRecognition,{useSpeechRecognition} from \"react-speech-recognition\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport { useLayoutEffect } from \"react\";\n//import { Navigate, useNavigate } from \"react-router-dom\";\n//import {useHistory} from 'react-router-dom';\nimport { useRef } from \"react\";\nconsole.reportErrorsAsExceptions = false;\nconst Stack = createNativeStackNavigator();\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n\nexport default function App() {\n\n  // const navRef= useRef();\n  //const navigate = Navigate();\n // const navigation = useNavigation();\n  \n  // // useLayoutEffect(() => {\n  // //   navigate.setOptions({\n  // //     headerShown: false,\n  // //   });\n  // // }, []);\n     // const navigate = useNavigate();\n      const [transcript, setTranscript] = useState('');\n  //     const [transcript, setTranscript] = useState('');\n\n\n  useEffect(() => {\n    //const recognition = new window.webkitSpeechRecognition();\n    recognition.onresult = (event) => {\n      const last = event.results.length - 1;\n      const command = event.results[last][0].transcript;\n      setTranscript(command);\n      console.log(command);\n    };\n\n    recognition.start();\n\n    return () => {\n      recognition.stop();\n    };\n  }, []);\n\n\n  useEffect(() => {\n    \n    switch (transcript.toLowerCase()) {\n      case 'home':\n        //navigate('/HomeScreen');\n        break;\n      case 'Discover':\n       // navigate('/Discover');\n        break;\n        case 'Map':\n       //   navigate('/Map');\n          break;\n      case 'contact':\n      //  navigate('/contact');\n        break;\n\n        case 'login':\n      //    navigate('/New');\n          break;\n      default:\n        break;\n    }\n  \n  }, [transcript]);\n\n\n\n  // console.log(recognition)\n  // recognition.start()\n\n  // recognition.onresult=(event)=>{\n  \n  //   const command =event.results[0][0].transcript;\n  //     console.log(command);\n    \n  //   if(command.includes(\"navigate to\") || command.includes(\"go to\")){\n      \n  //      if(command.includes(\"homepage\") || command.includes(\"indexpage\")){\n  //         //navigate.push(\"/HomeScreen\")\n  //          //navigate.push(\"/HomeScreen\")\n  //         //navigation.push()\n  //            console.log(command);\n  //       }\n  //       else if(command.includes(\"Discover\") || command.includes(\"Discover page\")){\n  //   //    navigate.push(\"/Discover\")\n  //             console.log(command);\n  //     }\n  //       else if(command.includes(\"Map\") || command.includes(\"Map page\")){\n  //   //    navigate.push(\"/Map\")\n  //             console.log(command);\n  //     }\n  //       else if(command.includes(\"Contact\") || command.includes(\"Contact page\")){\n  //   //    navigate.push(\"/Contact\")\n  //             console.log(command);\n  //     }\n  //       else if(command.includes(\"Sign up\") || command.includes(\"Sign up page\")){\n  //   //    navigate.push(\"/New\")\n  //             console.log(command);\n  //     }\n  //  }\n  // }\n\n  // recognition.onend=()=>{\n  //   recognition.start()\n\n  // }\n  return (\n    \n    <TailwindProvider>\n      <NavigationContainer>\n        <Stack.Navigator>\n                  \n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n          \n          <Stack.Screen name=\"Discover\" component={Discover} />\n         \n          <Stack.Screen name=\"ItemScreen\" component={ItemScreen} />\n          \n          <Stack.Screen name=\"New\" component={New}></Stack.Screen>\n          <Stack.Screen name=\"Map\" component={Map}/>\n          <Stack.Screen name=\"New_sign\" component={New_sign}></Stack.Screen>\n          <Stack.Screen name=\"Contact\" component={Contact}></Stack.Screen>\n          <Stack.Screen name=\"Speech\" component={Speech}></Stack.Screen>\n          \n          \n        </Stack.Navigator>\n      </NavigationContainer>\n    </TailwindProvider>\n\n\n  //   <BrowserRouter>\n  //   <Routes>\n  //   <Route path=\"HomeScreen\" exact element={<HomeScreen/>}/>\n  //   <Route path=\"Discover\" element={< Discover/>} />\n  //   <Route path=\"ItemScreen\" element={<ItemScreen/>} />\n  //   <Route path=\"New\" element={<New/>} />\n  //   <Route path=\"Map\"  element={<Map/>} />\n  //   <Route path=\"Login\" element={<Login/>} />\n  //   <Route path=\"New_sign\"element={<New_sign/>} />\n  //   <Route path=\"Contact\" element={<Contact/>} />\n  //   <Route path=\"Speech\" element={<Speech/>} />\n  //   </Routes>\n  // </BrowserRouter>\n\n    \n  );\n}\n\n\n// import React, { useState } from \"react\";\n// import { StatusBar } from \"expo-status-bar\";\n// import { SafeAreaView, Text, View } from \"react-native\";\n// import { TailwindProvider } from \"tailwindcss-react-native\";\n// import { NavigationContainer } from \"@react-navigation/native\";\n// import { createNativeStackNavigator } from \"@react-navigation/native-stack\";\n// import HomeScreen from \"./screens/HomeScreen\";\n// import Discover from \"./screens/Discover\";\n// import ItemScreen from \"./screens/ItemScreen\";\n// import Map from \"./screens/Map\";\n// import New from \"./screens/New\";\n// import Login from \"./screens/Login\";\n// import New_sign from \"./screens/New_sign\";\n// import Contact from \"./screens/Contact\";\n// import Speech from \"./screens/Speech\";\n// import { recognition } from \"./api/VoiceRecognization\";\n// import { useFocusEffect, useNavigation } from \"@react-navigation/native\"; // Import useNavigation hook\n\n// import { useLayoutEffect } from \"react\";\n// import { Navigate, useNavigate } from \"react-router-dom\";\n// import { useHistory } from \"react-router-dom\";\n// const Stack = createNativeStackNavigator();\n\n// export default function App() {\n//   console.log(recognition);\n//   recognition.start();\n\n//   const navigation = useNavigation(); // Use useNavigation hook at top level\n\n//   recognition.onresult = (event) => {\n//     const command = event.results[0][0].transcript;\n\n//     if (command.includes(\"navigate to\") || command.includes(\"go to\")) {\n//       if (command.includes(\"homepage\") || command.includes(\"indexpage\")) {\n//         navigateTo(\"Home\"); // Call navigateTo function\n//       } else if (command.includes(\"Discover\") || command.includes(\"Discover page\")) {\n//         navigateTo(\"Discover\"); // Call navigateTo function\n//       } else if (command.includes(\"Map\") || command.includes(\"Map page\")) {\n//         navigateTo(\"Map\"); // Call navigateTo function\n//       } else if (command.includes(\"Contact\") || command.includes(\"Contact page\")) {\n//         navigateTo(\"Contact\"); // Call navigateTo function\n//       } else if (command.includes(\"Sign up\") || command.includes(\"Sign up page\")) {\n//         navigateTo(\"New\"); // Call navigateTo function\n//       }\n//     }\n//   };\n\n//   recognition.onend = () => {\n//     recognition.start();\n//   };\n\n//   // Define navigateTo function\n//   const navigateTo =\n//     (navigation, screenName) => {\n//       navigation.navigate(screenName);\n//     }; // Use navigation object directly\n  \n\n//   return (\n//     <TailwindProvider>\n//       <NavigationContainer>\n//         <Stack.Navigator>\n//           <Stack.Screen name=\"Home\" component={HomeScreen} />\n//           <Stack.Screen name=\"Discover\" component={Discover} />\n//           <Stack.Screen name=\"ItemScreen\" component={ItemScreen} />\n//           <Stack.Screen name=\"New\" component={New}></Stack.Screen>\n//           <Stack.Screen name=\"Map\" component={Map} />\n//           <Stack.Screen name=\"New_sign\" component={New_sign}></Stack.Screen>\n//           <Stack.Screen name=\"Contact\" component={Contact}></Stack.Screen>\n//           <Stack.Screen name=\"Speech\" component={Speech}></Stack.Screen>\n//         </Stack.Navigator>\n//       </NavigationContainer>\n//     </TailwindProvider>\n//   );\n// }\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}