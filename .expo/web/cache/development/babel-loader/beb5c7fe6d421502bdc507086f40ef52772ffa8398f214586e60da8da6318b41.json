{"ast":null,"code":"import { StyledComponent } from \"tailwindcss-react-native\";\nimport React, { useState } from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TailwindProvider } from \"tailwindcss-react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport Discover from \"./screens/Discover\";\nimport ItemScreen from \"./screens/ItemScreen\";\nimport Map from \"./screens/Map\";\nimport New from \"./screens/New\";\nimport Login from \"./screens/Login\";\nimport New_sign from \"./screens/New_sign\";\nimport Contact from \"./screens/Contact\";\nimport Speech from \"./screens/Speech\";\nimport { recognition } from \"./api/VoiceRecognization\";\nimport { useFocusEffect, useNavigation } from \"@react-navigation/native\";\nimport { useLayoutEffect } from \"react\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  console.log(recognition);\n  recognition.start();\n  recognition.onresult = function (event) {\n    var command = event.results[0][0].transcript;\n    if (command.includes(\"navigate to\") || command.includes(\"go to\")) {\n      if (command.includes(\"homepage\") || command.includes(\"indexpage\")) {\n        navigateTo(\"Home\");\n      } else if (command.includes(\"Discover\") || command.includes(\"Discover page\")) {\n        navigateTo(\"Discover\");\n      } else if (command.includes(\"Map\") || command.includes(\"Map page\")) {\n        navigateTo(\"Map\");\n      } else if (command.includes(\"Contact\") || command.includes(\"Contact page\")) {\n        navigateTo(\"Contact\");\n      } else if (command.includes(\"Sign up\") || command.includes(\"Sign up page\")) {\n        navigateTo(\"New\");\n      }\n    }\n  };\n  recognition.onend = function () {\n    recognition.start();\n  };\n  var navigateTo = function navigateTo(screenName) {\n    var navigation = useNavigation();\n    navigation.navigate(screenName);\n  };\n  return _jsx(TailwindProvider, {\n    children: _jsx(NavigationContainer, {\n      children: _jsx(Stack.Navigator, {\n        children: _jsxs(BrowserRouter, {\n          children: [_jsx(Route, {\n            path: \"/\",\n            exact: true,\n            component: HomeScreen\n          }), _jsx(Route, {\n            path: \"/discover\",\n            component: Discover\n          }), _jsx(Route, {\n            path: \"/item/:id\",\n            component: ItemScreen\n          }), _jsx(Route, {\n            path: \"/new\",\n            component: New\n          }), _jsx(Route, {\n            path: \"/map\",\n            component: Map\n          }), _jsx(Route, {\n            path: \"/login\",\n            component: Login\n          }), _jsx(Route, {\n            path: \"/new_sign\",\n            component: New_sign\n          }), _jsx(Route, {\n            path: \"/contact\",\n            component: Contact\n          }), _jsx(Route, {\n            path: \"/speech\",\n            component: Speech\n          })]\n        })\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useState","StatusBar","SafeAreaView","Text","View","TailwindProvider","NavigationContainer","createNativeStackNavigator","HomeScreen","Discover","ItemScreen","Map","New","Login","New_sign","Contact","Speech","recognition","useFocusEffect","useNavigation","useLayoutEffect","Navigate","useNavigate","useHistory","jsx","_jsx","jsxs","_jsxs","Stack","App","console","log","start","onresult","event","command","results","transcript","includes","navigateTo","onend","screenName","navigation","navigate","children","Navigator","BrowserRouter","Route","path","exact","component"],"sources":["D:/xampp/htdocs/gotravel1/tourism simplified through voice/App.js"],"sourcesContent":["// import React ,{useState} from \"react\";\r\n// import { StatusBar } from \"expo-status-bar\";\r\n// import { SafeAreaView, Text, View } from \"react-native\";\r\n// import { TailwindProvider } from \"tailwindcss-react-native\";\r\n// import { NavigationContainer } from \"@react-navigation/native\";\r\n// import { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\n// import HomeScreen from \"./screens/HomeScreen\";\r\n// import Discover from \"./screens/Discover\";\r\n// import ItemScreen from \"./screens/ItemScreen\";\r\n// import Map from \"./screens/Map\";\r\n// import New from \"./screens/New\";\r\n\r\n// //import Login from \"./screens/Login\";\r\n// import 'react-native-gesture-handler';\r\n// import 'regenerator-runtime/runtime';\r\n// import Login from \"./screens/Login\";\r\n// import New_sign from \"./screens/New_sign\";\r\n// import Contact from \"./screens/Contact\";\r\n// import Speech from \"./screens/Speech\";\r\n// import { recognition } from \"./api/VoiceRecognization\";\r\n// import { useNavigation, redirect, Route, Routes } from \"react-router-dom\";\r\n// //import { Link, useNavigation} from \"@react-navigation/native\";\r\n// import SpeechRecognition,{useSpeechRecognition} from \"react-speech-recognition\";\r\n// import { useFocusEffect } from \"@react-navigation/native\";\r\n// import { useLayoutEffect } from \"react\";\r\n// import { Navigate, useNavigate } from \"react-router-dom\";\r\n// import {useHistory} from 'react-router-dom';\r\n// const Stack = createNativeStackNavigator();\r\n\r\n\r\n// export default function App() {\r\n//   //const navigate = Navigate();\r\n//   const navigation = useNavigation();\r\n  \r\n//   // // useLayoutEffect(() => {\r\n//   // //   navigate.setOptions({\r\n//   // //     headerShown: false,\r\n//   // //   });\r\n//   // // }, []);\r\n\r\n//   useFocusEffect(\r\n//     React.useCallback(() => {\r\n//       const onBackPress = () => {\r\n//         navigation.goBack();\r\n//         return true;\r\n//       };\r\n//     }\r\n//     )\r\n//     )\r\n\r\n//     BackHandler.addEventListener('hardwareBackPress', onBackPress);\r\n\r\n \r\n\r\n//   console.log(recognition)\r\n//   recognition.start()\r\n\r\n//   recognition.onresult=(event)=>{\r\n  \r\n//     const command =event.results[0][0].transcript;\r\n//     //console.log(command);\r\n    \r\n//     if(command.includes(\"navigate to\") || command.includes(\"go to\")){\r\n      \r\n//        if(command.includes(\"homepage\") || command.includes(\"indexpage\")){\r\n//           //navigate.push(\"/HomeScreen\")\r\n//            //navigate.push(\"/HomeScreen\")\r\n//           //navigation.push()\r\n//              console.log(command);\r\n//         }\r\n//         else if(command.includes(\"Discover\") || command.includes(\"Discover page\")){\r\n//     //    navigate.push(\"/Discover\")\r\n//               console.log(command);\r\n//       }\r\n//         else if(command.includes(\"Map\") || command.includes(\"Map page\")){\r\n//     //    navigate.push(\"/Map\")\r\n//               console.log(command);\r\n//       }\r\n//         else if(command.includes(\"Contact\") || command.includes(\"Contact page\")){\r\n//     //    navigate.push(\"/Contact\")\r\n//               console.log(command);\r\n//       }\r\n//         else if(command.includes(\"Sign up\") || command.includes(\"Sign up page\")){\r\n//     //    navigate.push(\"/New\")\r\n//               console.log(command);\r\n//       }\r\n//    }\r\n//   }\r\n\r\n//   recognition.onend=()=>{\r\n//     recognition.start()\r\n\r\n//   }\r\n//   return (\r\n    \r\n//     <TailwindProvider>\r\n//       <NavigationContainer>\r\n//         <Stack.Navigator>\r\n//           <Routes>\r\n//           <Route>\r\n//           <Stack.Screen name=\"Home\" component={HomeScreen} /></Route>\r\n//           <Route>\r\n//           <Stack.Screen name=\"Discover\" component={Discover} /></Route>\r\n//           <Route>\r\n//           <Stack.Screen name=\"ItemScreen\" component={ItemScreen} /></Route>\r\n//           <Route>\r\n//           <Stack.Screen name=\"New\" component={New}></Stack.Screen></Route>\r\n//           <Stack.Screen name=\"Map\" component={Map}/>\r\n//           <Stack.Screen name=\"New_sign\" component={New_sign}></Stack.Screen>\r\n//           <Stack.Screen name=\"Contact\" component={Contact}></Stack.Screen>\r\n//           <Stack.Screen name=\"Speech\" component={Speech}></Stack.Screen>\r\n//           </Routes>\r\n          \r\n          \r\n//         </Stack.Navigator>\r\n//       </NavigationContainer>\r\n//     </TailwindProvider>\r\n\r\n    \r\n//   );\r\n// }\r\n\r\nimport React, { useState } from \"react\";\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport { SafeAreaView, Text, View } from \"react-native\";\r\nimport { TailwindProvider } from \"tailwindcss-react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport HomeScreen from \"./screens/HomeScreen\";\r\nimport Discover from \"./screens/Discover\";\r\nimport ItemScreen from \"./screens/ItemScreen\";\r\nimport Map from \"./screens/Map\";\r\nimport New from \"./screens/New\";\r\nimport Login from \"./screens/Login\";\r\nimport New_sign from \"./screens/New_sign\";\r\nimport Contact from \"./screens/Contact\";\r\nimport Speech from \"./screens/Speech\";\r\nimport { recognition } from \"./api/VoiceRecognization\";\r\nimport { useFocusEffect, useNavigation } from \"@react-navigation/native\"; // Import useNavigation hook\r\n\r\nimport { useLayoutEffect } from \"react\";\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {\r\n  console.log(recognition);\r\n  recognition.start();\r\n\r\n  recognition.onresult = (event) => {\r\n    const command = event.results[0][0].transcript;\r\n\r\n    if (command.includes(\"navigate to\") || command.includes(\"go to\")) {\r\n      if (command.includes(\"homepage\") || command.includes(\"indexpage\")) {\r\n        navigateTo(\"Home\"); // Call navigateTo function\r\n      } else if (command.includes(\"Discover\") || command.includes(\"Discover page\")) {\r\n        navigateTo(\"Discover\"); // Call navigateTo function\r\n      } else if (command.includes(\"Map\") || command.includes(\"Map page\")) {\r\n        navigateTo(\"Map\"); // Call navigateTo function\r\n      } else if (command.includes(\"Contact\") || command.includes(\"Contact page\")) {\r\n        navigateTo(\"Contact\"); // Call navigateTo function\r\n      } else if (command.includes(\"Sign up\") || command.includes(\"Sign up page\")) {\r\n        navigateTo(\"New\"); // Call navigateTo function\r\n      }\r\n    }\r\n  };\r\n\r\n  recognition.onend = () => {\r\n    recognition.start();\r\n  };\r\n\r\n  // Define navigateTo function\r\n  const navigateTo = (screenName) => {\r\n    const navigation = useNavigation(); // Use useNavigation hook\r\n    navigation.navigate(screenName);\r\n  };\r\n\r\n  return (\r\n    <TailwindProvider>\r\n      <NavigationContainer>\r\n        <Stack.Navigator>\r\n        <BrowserRouter>\r\n      <Route path=\"/\" exact component={HomeScreen} />\r\n      <Route path=\"/discover\" component={Discover} />\r\n      <Route path=\"/item/:id\" component={ItemScreen} />\r\n      <Route path=\"/new\" component={New} />\r\n      <Route path=\"/map\" component={Map} />\r\n      <Route path=\"/login\" component={Login} />\r\n      <Route path=\"/new_sign\" component={New_sign} />\r\n      <Route path=\"/contact\" component={Contact} />\r\n      <Route path=\"/speech\" component={Speech} />\r\n    </BrowserRouter>\r\n\r\n        </Stack.Navigator>\r\n      </NavigationContainer>\r\n    </TailwindProvider>\r\n  );\r\n}\r\n"],"mappings":";AA0HA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,QAAQ,iBAAiB;AAAC,OAAAC,YAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAE5C,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,0BAA0B,QAAQ,gCAAgC;AAC3E,OAAOC,UAAU;AACjB,OAAOC,QAAQ;AACf,OAAOC,UAAU;AACjB,OAAOC,GAAG;AACV,OAAOC,GAAG;AACV,OAAOC,KAAK;AACZ,OAAOC,QAAQ;AACf,OAAOC,OAAO;AACd,OAAOC,MAAM;AACb,SAASC,WAAW;AACpB,SAASC,cAAc,EAAEC,aAAa,QAAQ,0BAA0B;AAExE,SAASC,eAAe,QAAQ,OAAO;AACvC,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAC9C,IAAMC,KAAK,GAAGrB,0BAA0B,EAAE;AAE1C,eAAe,SAASsB,GAAGA,CAAA,EAAG;EAC5BC,OAAO,CAACC,GAAG,CAACd,WAAW,CAAC;EACxBA,WAAW,CAACe,KAAK,EAAE;EAEnBf,WAAW,CAACgB,QAAQ,GAAG,UAACC,KAAK,EAAK;IAChC,IAAMC,OAAO,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,UAAU;IAE9C,IAAIF,OAAO,CAACG,QAAQ,CAAC,aAAa,CAAC,IAAIH,OAAO,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE;MAChE,IAAIH,OAAO,CAACG,QAAQ,CAAC,UAAU,CAAC,IAAIH,OAAO,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAE;QACjEC,UAAU,CAAC,MAAM,CAAC;MACpB,CAAC,MAAM,IAAIJ,OAAO,CAACG,QAAQ,CAAC,UAAU,CAAC,IAAIH,OAAO,CAACG,QAAQ,CAAC,eAAe,CAAC,EAAE;QAC5EC,UAAU,CAAC,UAAU,CAAC;MACxB,CAAC,MAAM,IAAIJ,OAAO,CAACG,QAAQ,CAAC,KAAK,CAAC,IAAIH,OAAO,CAACG,QAAQ,CAAC,UAAU,CAAC,EAAE;QAClEC,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,MAAM,IAAIJ,OAAO,CAACG,QAAQ,CAAC,SAAS,CAAC,IAAIH,OAAO,CAACG,QAAQ,CAAC,cAAc,CAAC,EAAE;QAC1EC,UAAU,CAAC,SAAS,CAAC;MACvB,CAAC,MAAM,IAAIJ,OAAO,CAACG,QAAQ,CAAC,SAAS,CAAC,IAAIH,OAAO,CAACG,QAAQ,CAAC,cAAc,CAAC,EAAE;QAC1EC,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;EACF,CAAC;EAEDtB,WAAW,CAACuB,KAAK,GAAG,YAAM;IACxBvB,WAAW,CAACe,KAAK,EAAE;EACrB,CAAC;EAGD,IAAMO,UAAU,GAAG,SAAbA,UAAUA,CAAIE,UAAU,EAAK;IACjC,IAAMC,UAAU,GAAGvB,aAAa,EAAE;IAClCuB,UAAU,CAACC,QAAQ,CAACF,UAAU,CAAC;EACjC,CAAC;EAED,OACEhB,IAAA,CAACpB,gBAAgB;IAAAuC,QAAA,EACfnB,IAAA,CAACnB,mBAAmB;MAAAsC,QAAA,EAClBnB,IAAA,CAACG,KAAK,CAACiB,SAAS;QAAAD,QAAA,EAChBjB,KAAA,CAACmB,aAAa;UAAAF,QAAA,GAChBnB,IAAA,CAACsB,KAAK;YAACC,IAAI,EAAC,GAAG;YAACC,KAAK;YAACC,SAAS,EAAE1C;UAAW,EAAG,EAC/CiB,IAAA,CAACsB,KAAK;YAACC,IAAI,EAAC,WAAW;YAACE,SAAS,EAAEzC;UAAS,EAAG,EAC/CgB,IAAA,CAACsB,KAAK;YAACC,IAAI,EAAC,WAAW;YAACE,SAAS,EAAExC;UAAW,EAAG,EACjDe,IAAA,CAACsB,KAAK;YAACC,IAAI,EAAC,MAAM;YAACE,SAAS,EAAEtC;UAAI,EAAG,EACrCa,IAAA,CAACsB,KAAK;YAACC,IAAI,EAAC,MAAM;YAACE,SAAS,EAAEvC;UAAI,EAAG,EACrCc,IAAA,CAACsB,KAAK;YAACC,IAAI,EAAC,QAAQ;YAACE,SAAS,EAAErC;UAAM,EAAG,EACzCY,IAAA,CAACsB,KAAK;YAACC,IAAI,EAAC,WAAW;YAACE,SAAS,EAAEpC;UAAS,EAAG,EAC/CW,IAAA,CAACsB,KAAK;YAACC,IAAI,EAAC,UAAU;YAACE,SAAS,EAAEnC;UAAQ,EAAG,EAC7CU,IAAA,CAACsB,KAAK;YAACC,IAAI,EAAC,SAAS;YAACE,SAAS,EAAElC;UAAO,EAAG;QAAA;MAC7B;IAEM;EACE,EACL;AAEvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}