{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport WorkletEventHandler from \"./reanimated2/WorkletEventHandler\";\nimport setAndForwardRef from \"./setAndForwardRef\";\nimport \"./reanimated2/layoutReanimation/animationsManager\";\nimport invariant from 'invariant';\nimport { adaptViewConfig } from \"./ConfigHelper\";\nimport { RNRenderer } from \"./reanimated2/platform-specific/RNRenderer\";\nimport { configureLayoutAnimations, enableLayoutAnimations, runOnUI, startMapper, stopMapper } from \"./reanimated2/core\";\nimport { isJest, isChromeDebugger, shouldBeUseWeb } from \"./reanimated2/PlatformChecker\";\nimport { initialUpdaterRun } from \"./reanimated2/animation\";\nimport { DefaultSharedTransition, LayoutAnimationType } from \"./reanimated2/layoutReanimation\";\nimport { makeViewDescriptorsSet } from \"./reanimated2/ViewDescriptorsSet\";\nimport { getShadowNodeWrapperFromRef } from \"./reanimated2/fabricUtils\";\nimport updateProps from \"./reanimated2/UpdateProps\";\nimport NativeReanimatedModule from \"./reanimated2/NativeReanimated\";\nimport { isSharedValue } from \"./reanimated2\";\nfunction dummyListener() {}\nfunction maybeBuild(layoutAnimationOrBuilder) {\n  var isAnimationBuilder = function isAnimationBuilder(value) {\n    return 'build' in layoutAnimationOrBuilder && typeof layoutAnimationOrBuilder.build === 'function';\n  };\n  if (isAnimationBuilder(layoutAnimationOrBuilder)) {\n    return layoutAnimationOrBuilder.build();\n  } else {\n    return layoutAnimationOrBuilder;\n  }\n}\nfunction flattenArray(array) {\n  if (!Array.isArray(array)) {\n    return [array];\n  }\n  var resultArr = [];\n  var _flattenArray = function _flattenArray(arr) {\n    arr.forEach(function (item) {\n      if (Array.isArray(item)) {\n        _flattenArray(item);\n      } else {\n        resultArr.push(item);\n      }\n    });\n  };\n  _flattenArray(array);\n  return resultArr;\n}\nfunction onlyAnimatedStyles(styles) {\n  return styles.filter(function (style) {\n    return style === null || style === void 0 ? void 0 : style.viewDescriptors;\n  });\n}\nfunction isSameAnimatedStyle(style1, style2) {\n  return (style1 === null || style1 === void 0 ? void 0 : style1.viewsRef) === (style2 === null || style2 === void 0 ? void 0 : style2.viewsRef);\n}\nvar isSameAnimatedProps = isSameAnimatedStyle;\nvar has = function has(key, x) {\n  if (typeof x === 'function' || typeof x === 'object') {\n    if (x === null || x === undefined) {\n      return false;\n    } else {\n      return key in x;\n    }\n  }\n  return false;\n};\nfunction isInlineStyleTransform(transform) {\n  if (!transform) {\n    return false;\n  }\n  return transform.some(function (t) {\n    return hasInlineStyles(t);\n  });\n}\nfunction hasInlineStyles(style) {\n  if (!style) {\n    return false;\n  }\n  return Object.keys(style).some(function (key) {\n    var styleValue = style[key];\n    return isSharedValue(styleValue) || key === 'transform' && isInlineStyleTransform(styleValue);\n  });\n}\nfunction extractSharedValuesMapFromProps(props) {\n  var inlineProps = {};\n  for (var key in props) {\n    var value = props[key];\n    if (key === 'style') {\n      var _props$style;\n      var styles = flattenArray((_props$style = props.style) != null ? _props$style : []);\n      styles.forEach(function (style) {\n        if (!style) {\n          return;\n        }\n        for (var _ref of Object.entries(style)) {\n          var _ref2 = _slicedToArray(_ref, 2);\n          var _key = _ref2[0];\n          var styleValue = _ref2[1];\n          if (isSharedValue(styleValue)) {\n            inlineProps[_key] = styleValue;\n          } else if (_key === 'transform' && isInlineStyleTransform(styleValue)) {\n            inlineProps[_key] = styleValue;\n          }\n        }\n      });\n    } else if (isSharedValue(value)) {\n      inlineProps[key] = value;\n    }\n  }\n  return inlineProps;\n}\nfunction inlinePropsHasChanged(styles1, styles2) {\n  if (Object.keys(styles1).length !== Object.keys(styles2).length) {\n    return true;\n  }\n  for (var key of Object.keys(styles1)) {\n    if (styles1[key] !== styles2[key]) return true;\n  }\n  return false;\n}\nfunction getInlinePropsUpdate(inlineProps) {\n  'worklet';\n\n  var update = {};\n  for (var _ref3 of Object.entries(inlineProps)) {\n    var _ref4 = _slicedToArray(_ref3, 2);\n    var key = _ref4[0];\n    var styleValue = _ref4[1];\n    if (key === 'transform') {\n      update[key] = styleValue.map(function (transform) {\n        return getInlinePropsUpdate(transform);\n      });\n    } else if (isSharedValue(styleValue)) {\n      update[key] = styleValue.value;\n    } else {\n      update[key] = styleValue;\n    }\n  }\n  return update;\n}\nexport default function createAnimatedComponent(Component, options) {\n  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');\n  var AnimatedComponent = function (_React$Component) {\n    _inherits(AnimatedComponent, _React$Component);\n    var _super = _createSuper(AnimatedComponent);\n    function AnimatedComponent(props) {\n      var _this;\n      _classCallCheck(this, AnimatedComponent);\n      _this = _super.call(this, props);\n      _defineProperty(_assertThisInitialized(_this), \"_styles\", null);\n      _defineProperty(_assertThisInitialized(_this), \"_animatedProps\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"_viewTag\", -1);\n      _defineProperty(_assertThisInitialized(_this), \"_isFirstRender\", true);\n      _defineProperty(_assertThisInitialized(_this), \"animatedStyle\", {\n        value: {}\n      });\n      _defineProperty(_assertThisInitialized(_this), \"initialStyle\", {});\n      _defineProperty(_assertThisInitialized(_this), \"_component\", null);\n      _defineProperty(_assertThisInitialized(_this), \"_inlinePropsViewDescriptors\", null);\n      _defineProperty(_assertThisInitialized(_this), \"_inlinePropsMapperId\", null);\n      _defineProperty(_assertThisInitialized(_this), \"_inlineProps\", {});\n      _defineProperty(_assertThisInitialized(_this), \"_setComponentRef\", setAndForwardRef({\n        getForwardedRef: function getForwardedRef() {\n          return _this.props.forwardedRef;\n        },\n        setLocalRef: function setLocalRef(ref) {\n          var tag = findNodeHandle(ref);\n          var _this$props = _this.props,\n            layout = _this$props.layout,\n            entering = _this$props.entering,\n            exiting = _this$props.exiting,\n            sharedTransitionTag = _this$props.sharedTransitionTag;\n          if ((layout || entering || exiting || sharedTransitionTag) && tag != null) {\n            if (!shouldBeUseWeb()) {\n              enableLayoutAnimations(true, false);\n            }\n            if (layout) {\n              configureLayoutAnimations(tag, LayoutAnimationType.LAYOUT, maybeBuild(layout));\n            }\n            if (entering) {\n              configureLayoutAnimations(tag, LayoutAnimationType.ENTERING, maybeBuild(entering));\n            }\n            if (exiting) {\n              configureLayoutAnimations(tag, LayoutAnimationType.EXITING, maybeBuild(exiting));\n            }\n            if (sharedTransitionTag) {\n              var _this$props$sharedTra;\n              var sharedElementTransition = (_this$props$sharedTra = _this.props.sharedTransitionStyle) != null ? _this$props$sharedTra : DefaultSharedTransition;\n              configureLayoutAnimations(tag, LayoutAnimationType.SHARED_ELEMENT_TRANSITION, maybeBuild(sharedElementTransition), sharedTransitionTag);\n            }\n          }\n          if (ref !== _this._component) {\n            _this._component = ref;\n          }\n        }\n      }));\n      if (isJest()) {\n        _this.animatedStyle = {\n          value: {}\n        };\n      }\n      return _this;\n    }\n    _createClass(AnimatedComponent, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._detachNativeEvents();\n        this._detachStyles();\n        this._detachInlineProps();\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this._attachNativeEvents();\n        this._attachAnimatedStyles();\n        this._attachInlineProps();\n      }\n    }, {\n      key: \"_getEventViewRef\",\n      value: function _getEventViewRef() {\n        var _this$_component;\n        return (_this$_component = this._component) !== null && _this$_component !== void 0 && _this$_component.getScrollableNode ? this._component.getScrollableNode() : this._component;\n      }\n    }, {\n      key: \"_attachNativeEvents\",\n      value: function _attachNativeEvents() {\n        var node = this._getEventViewRef();\n        var viewTag = findNodeHandle(options !== null && options !== void 0 && options.setNativeProps ? this : node);\n        for (var key in this.props) {\n          var prop = this.props[key];\n          if (has('current', prop) && prop.current instanceof WorkletEventHandler) {\n            prop.current.registerForEvents(viewTag, key);\n          }\n        }\n      }\n    }, {\n      key: \"_detachNativeEvents\",\n      value: function _detachNativeEvents() {\n        for (var key in this.props) {\n          var prop = this.props[key];\n          if (has('current', prop) && prop.current instanceof WorkletEventHandler) {\n            prop.current.unregisterFromEvents();\n          }\n        }\n      }\n    }, {\n      key: \"_detachStyles\",\n      value: function _detachStyles() {\n        if (Platform.OS === 'web' && this._styles !== null) {\n          for (var style of this._styles) {\n            if (style !== null && style !== void 0 && style.viewsRef) {\n              style.viewsRef.remove(this);\n            }\n          }\n        } else if (this._viewTag !== -1 && this._styles !== null) {\n          var _this$props$animatedP;\n          for (var _style of this._styles) {\n            _style.viewDescriptors.remove(this._viewTag);\n          }\n          if ((_this$props$animatedP = this.props.animatedProps) !== null && _this$props$animatedP !== void 0 && _this$props$animatedP.viewDescriptors) {\n            this.props.animatedProps.viewDescriptors.remove(this._viewTag);\n          }\n          if (global._IS_FABRIC) {\n            var viewTag = this._viewTag;\n            runOnUI(function () {\n              'worklet';\n\n              _removeShadowNodeFromRegistry(viewTag);\n            })();\n          }\n        }\n      }\n    }, {\n      key: \"_reattachNativeEvents\",\n      value: function _reattachNativeEvents(prevProps) {\n        var viewTag;\n        for (var key in this.props) {\n          var prop = this.props[key];\n          if (has('current', prop) && prop.current instanceof WorkletEventHandler) {\n            if (viewTag === undefined) {\n              viewTag = prop.current.viewTag;\n            }\n          }\n        }\n        for (var _key2 in prevProps) {\n          var _prop = this.props[_key2];\n          if (has('current', _prop) && _prop.current instanceof WorkletEventHandler && _prop.current.reattachNeeded) {\n            _prop.current.unregisterFromEvents();\n          }\n        }\n        for (var _key3 in this.props) {\n          var _prop2 = this.props[_key3];\n          if (has('current', _prop2) && _prop2.current instanceof WorkletEventHandler && _prop2.current.reattachNeeded) {\n            _prop2.current.registerForEvents(viewTag, _key3);\n            _prop2.current.reattachNeeded = false;\n          }\n        }\n      }\n    }, {\n      key: \"_updateFromNative\",\n      value: function _updateFromNative(props) {\n        if (options !== null && options !== void 0 && options.setNativeProps) {\n          options.setNativeProps(this._component, props);\n        } else {\n          var _this$_component2, _this$_component2$set;\n          (_this$_component2 = this._component) === null || _this$_component2 === void 0 ? void 0 : (_this$_component2$set = _this$_component2.setNativeProps) === null || _this$_component2$set === void 0 ? void 0 : _this$_component2$set.call(_this$_component2, props);\n        }\n      }\n    }, {\n      key: \"_getViewInfo\",\n      value: function _getViewInfo() {\n        var viewTag;\n        var viewName;\n        var shadowNodeWrapper = null;\n        var viewConfig;\n        if (Platform.OS === 'web') {\n          viewTag = findNodeHandle(this);\n          viewName = null;\n          shadowNodeWrapper = null;\n          viewConfig = null;\n        } else {\n          var _hostInstance$viewCon;\n          var hostInstance = RNRenderer.findHostInstance_DEPRECATED(this);\n          if (!hostInstance) {\n            throw new Error('Cannot find host instance for this component. Maybe it renders nothing?');\n          }\n          viewTag = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance._nativeTag;\n          viewName = hostInstance === null || hostInstance === void 0 ? void 0 : (_hostInstance$viewCon = hostInstance.viewConfig) === null || _hostInstance$viewCon === void 0 ? void 0 : _hostInstance$viewCon.uiViewClassName;\n          viewConfig = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance.viewConfig;\n          if (global._IS_FABRIC) {\n            shadowNodeWrapper = getShadowNodeWrapperFromRef(this);\n          }\n        }\n        return {\n          viewTag: viewTag,\n          viewName: viewName,\n          shadowNodeWrapper: shadowNodeWrapper,\n          viewConfig: viewConfig\n        };\n      }\n    }, {\n      key: \"_attachAnimatedStyles\",\n      value: function _attachAnimatedStyles() {\n        var _this2 = this;\n        var _this$props$animatedP2, _this$props$animatedP3;\n        var styles = this.props.style ? onlyAnimatedStyles(flattenArray(this.props.style)) : [];\n        var prevStyles = this._styles;\n        this._styles = styles;\n        var prevAnimatedProps = this._animatedProps;\n        this._animatedProps = this.props.animatedProps;\n        var _this$_getViewInfo = this._getViewInfo(),\n          viewTag = _this$_getViewInfo.viewTag,\n          viewName = _this$_getViewInfo.viewName,\n          shadowNodeWrapper = _this$_getViewInfo.shadowNodeWrapper,\n          viewConfig = _this$_getViewInfo.viewConfig;\n        var hasReanimated2Props = ((_this$props$animatedP2 = this.props.animatedProps) === null || _this$props$animatedP2 === void 0 ? void 0 : _this$props$animatedP2.viewDescriptors) || styles.length;\n        if (hasReanimated2Props && viewConfig) {\n          adaptViewConfig(viewConfig);\n        }\n        this._viewTag = viewTag;\n        if (prevStyles) {\n          var hasOneSameStyle = styles.length === 1 && prevStyles.length === 1 && isSameAnimatedStyle(styles[0], prevStyles[0]);\n          if (!hasOneSameStyle) {\n            var _loop = function _loop(prevStyle) {\n              var isPresent = styles.some(function (style) {\n                return isSameAnimatedStyle(style, prevStyle);\n              });\n              if (!isPresent) {\n                prevStyle.viewDescriptors.remove(viewTag);\n              }\n            };\n            for (var prevStyle of prevStyles) {\n              _loop(prevStyle);\n            }\n          }\n        }\n        styles.forEach(function (style) {\n          style.viewDescriptors.add({\n            tag: viewTag,\n            name: viewName,\n            shadowNodeWrapper: shadowNodeWrapper\n          });\n          if (isJest()) {\n            _this2.animatedStyle.value = _objectSpread(_objectSpread({}, _this2.animatedStyle.value), style.initial.value);\n            style.animatedStyle.current = _this2.animatedStyle;\n          }\n        });\n        if (prevAnimatedProps && !isSameAnimatedProps(prevAnimatedProps, this.props.animatedProps)) {\n          prevAnimatedProps.viewDescriptors.remove(viewTag);\n        }\n        if ((_this$props$animatedP3 = this.props.animatedProps) !== null && _this$props$animatedP3 !== void 0 && _this$props$animatedP3.viewDescriptors) {\n          this.props.animatedProps.viewDescriptors.add({\n            tag: viewTag,\n            name: viewName,\n            shadowNodeWrapper: shadowNodeWrapper\n          });\n        }\n      }\n    }, {\n      key: \"_attachInlineProps\",\n      value: function _attachInlineProps() {\n        var newInlineProps = extractSharedValuesMapFromProps(this.props);\n        var hasChanged = inlinePropsHasChanged(newInlineProps, this._inlineProps);\n        if (hasChanged) {\n          if (!this._inlinePropsViewDescriptors) {\n            this._inlinePropsViewDescriptors = makeViewDescriptorsSet();\n            var _this$_getViewInfo2 = this._getViewInfo(),\n              viewTag = _this$_getViewInfo2.viewTag,\n              viewName = _this$_getViewInfo2.viewName,\n              shadowNodeWrapper = _this$_getViewInfo2.shadowNodeWrapper,\n              viewConfig = _this$_getViewInfo2.viewConfig;\n            if (Object.keys(newInlineProps).length && viewConfig) {\n              adaptViewConfig(viewConfig);\n            }\n            this._inlinePropsViewDescriptors.add({\n              tag: viewTag,\n              name: viewName,\n              shadowNodeWrapper: shadowNodeWrapper\n            });\n          }\n          var sharableViewDescriptors = this._inlinePropsViewDescriptors.sharableViewDescriptors;\n          var maybeViewRef = NativeReanimatedModule.native ? undefined : {\n            items: new Set([this])\n          };\n          var updaterFunction = function updaterFunction() {\n            'worklet';\n\n            var update = getInlinePropsUpdate(newInlineProps);\n            updateProps(sharableViewDescriptors, update, maybeViewRef);\n          };\n          this._inlineProps = newInlineProps;\n          if (this._inlinePropsMapperId) {\n            stopMapper(this._inlinePropsMapperId);\n          }\n          this._inlinePropsMapperId = null;\n          if (Object.keys(newInlineProps).length) {\n            this._inlinePropsMapperId = startMapper(updaterFunction, Object.values(newInlineProps));\n          }\n        }\n      }\n    }, {\n      key: \"_detachInlineProps\",\n      value: function _detachInlineProps() {\n        if (this._inlinePropsMapperId) {\n          stopMapper(this._inlinePropsMapperId);\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        this._reattachNativeEvents(prevProps);\n        this._attachAnimatedStyles();\n        this._attachInlineProps();\n      }\n    }, {\n      key: \"_filterNonAnimatedProps\",\n      value: function _filterNonAnimatedProps(inputProps) {\n        var _this3 = this;\n        var props = {};\n        var _loop2 = function _loop2(key) {\n          var value = inputProps[key];\n          if (key === 'style') {\n            var styleProp = inputProps.style;\n            var styles = flattenArray(styleProp != null ? styleProp : []);\n            var processedStyle = styles.map(function (style) {\n              if (style && style.viewDescriptors) {\n                style.viewsRef.add(_this3);\n                if (_this3._isFirstRender) {\n                  _this3.initialStyle = _objectSpread(_objectSpread({}, style.initial.value), initialUpdaterRun(style.initial.updater));\n                }\n                return _this3.initialStyle;\n              } else if (hasInlineStyles(style)) {\n                if (_this3._isFirstRender) {\n                  return getInlinePropsUpdate(style);\n                }\n                var newStyle = {};\n                for (var _ref5 of Object.entries(style)) {\n                  var _ref6 = _slicedToArray(_ref5, 2);\n                  var _key4 = _ref6[0];\n                  var styleValue = _ref6[1];\n                  if (!isSharedValue(styleValue) && !(_key4 === 'transform' && isInlineStyleTransform(styleValue))) {\n                    newStyle[_key4] = styleValue;\n                  }\n                }\n                return newStyle;\n              } else {\n                return style;\n              }\n            });\n            props[key] = StyleSheet.flatten(processedStyle);\n          } else if (key === 'animatedProps') {\n            var animatedProp = inputProps.animatedProps;\n            if (animatedProp.initial !== undefined) {\n              Object.keys(animatedProp.initial.value).forEach(function (key) {\n                var _animatedProp$initial, _animatedProp$viewsRe;\n                props[key] = (_animatedProp$initial = animatedProp.initial) === null || _animatedProp$initial === void 0 ? void 0 : _animatedProp$initial.value[key];\n                (_animatedProp$viewsRe = animatedProp.viewsRef) === null || _animatedProp$viewsRe === void 0 ? void 0 : _animatedProp$viewsRe.add(_this3);\n              });\n            }\n          } else if (has('current', value) && value.current instanceof WorkletEventHandler) {\n            if (value.current.eventNames.length > 0) {\n              value.current.eventNames.forEach(function (eventName) {\n                props[eventName] = has('listeners', value.current) ? value.current.listeners[eventName] : dummyListener;\n              });\n            } else {\n              props[key] = dummyListener;\n            }\n          } else if (isSharedValue(value)) {\n            if (_this3._isFirstRender) {\n              props[key] = value.value;\n            }\n          } else if (key !== 'onGestureHandlerStateChange' || !isChromeDebugger()) {\n            props[key] = value;\n          }\n        };\n        for (var key in inputProps) {\n          _loop2(key);\n        }\n        return props;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this._filterNonAnimatedProps(this.props);\n        if (isJest()) {\n          props.animatedStyle = this.animatedStyle;\n        }\n        if (this._isFirstRender) {\n          this._isFirstRender = false;\n        }\n        var platformProps = Platform.select({\n          web: {},\n          default: {\n            collapsable: false\n          }\n        });\n        return React.createElement(Component, _extends({}, props, {\n          ref: this._setComponentRef\n        }, platformProps));\n      }\n    }]);\n    return AnimatedComponent;\n  }(React.Component);\n  _defineProperty(AnimatedComponent, \"displayName\", void 0);\n  AnimatedComponent.displayName = \"AnimatedComponent(\" + (Component.displayName || Component.name || 'Component') + \")\";\n  return React.forwardRef(function (props, ref) {\n    return React.createElement(AnimatedComponent, _extends({}, props, ref === null ? null : {\n      forwardedRef: ref\n    }));\n  });\n}","map":{"version":3,"names":["React","findNodeHandle","Platform","StyleSheet","WorkletEventHandler","setAndForwardRef","invariant","adaptViewConfig","RNRenderer","configureLayoutAnimations","enableLayoutAnimations","runOnUI","startMapper","stopMapper","isJest","isChromeDebugger","shouldBeUseWeb","initialUpdaterRun","DefaultSharedTransition","LayoutAnimationType","makeViewDescriptorsSet","getShadowNodeWrapperFromRef","updateProps","NativeReanimatedModule","isSharedValue","dummyListener","maybeBuild","layoutAnimationOrBuilder","isAnimationBuilder","value","build","flattenArray","array","Array","isArray","resultArr","_flattenArray","arr","forEach","item","push","onlyAnimatedStyles","styles","filter","style","viewDescriptors","isSameAnimatedStyle","style1","style2","viewsRef","isSameAnimatedProps","has","key","x","undefined","isInlineStyleTransform","transform","some","t","hasInlineStyles","Object","keys","styleValue","extractSharedValuesMapFromProps","props","inlineProps","_props$style","_ref","entries","_ref2","_slicedToArray","inlinePropsHasChanged","styles1","styles2","length","getInlinePropsUpdate","update","_ref3","_ref4","map","createAnimatedComponent","Component","options","prototype","isReactComponent","AnimatedComponent","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","getForwardedRef","forwardedRef","setLocalRef","ref","tag","_this$props","layout","entering","exiting","sharedTransitionTag","LAYOUT","ENTERING","EXITING","_this$props$sharedTra","sharedElementTransition","sharedTransitionStyle","SHARED_ELEMENT_TRANSITION","_component","animatedStyle","_createClass","componentWillUnmount","_detachNativeEvents","_detachStyles","_detachInlineProps","componentDidMount","_attachNativeEvents","_attachAnimatedStyles","_attachInlineProps","_getEventViewRef","_this$_component","getScrollableNode","node","viewTag","setNativeProps","prop","current","registerForEvents","unregisterFromEvents","OS","_styles","remove","_viewTag","_this$props$animatedP","animatedProps","global","_IS_FABRIC","_removeShadowNodeFromRegistry","_reattachNativeEvents","prevProps","reattachNeeded","_updateFromNative","_this$_component2","_this$_component2$set","_getViewInfo","viewName","shadowNodeWrapper","viewConfig","_hostInstance$viewCon","hostInstance","findHostInstance_DEPRECATED","Error","_nativeTag","uiViewClassName","_this2","_this$props$animatedP2","_this$props$animatedP3","prevStyles","prevAnimatedProps","_animatedProps","_this$_getViewInfo","hasReanimated2Props","hasOneSameStyle","_loop","prevStyle","isPresent","add","name","_objectSpread","initial","newInlineProps","hasChanged","_inlineProps","_inlinePropsViewDescriptors","_this$_getViewInfo2","sharableViewDescriptors","maybeViewRef","native","items","Set","updaterFunction","_inlinePropsMapperId","values","componentDidUpdate","_filterNonAnimatedProps","inputProps","_this3","_loop2","styleProp","processedStyle","_isFirstRender","initialStyle","updater","newStyle","_ref5","_ref6","flatten","animatedProp","_animatedProp$initial","_animatedProp$viewsRe","eventNames","eventName","listeners","render","platformProps","select","web","default","collapsable","createElement","_extends","_setComponentRef","displayName","forwardRef"],"sources":["D:\\xampp\\htdocs\\gotravel1\\toursim-simplified-through-voice-master\\toursim-simplified-through-voice-master\\node_modules\\react-native-reanimated\\lib\\module\\createAnimatedComponent.tsx"],"sourcesContent":["import React, { Component, ComponentType, MutableRefObject, Ref } from 'react';\nimport { findNodeHandle, Platform, StyleSheet } from 'react-native';\nimport WorkletEventHandler from './reanimated2/WorkletEventHandler';\nimport setAndForwardRef from './setAndForwardRef';\nimport './reanimated2/layoutReanimation/animationsManager';\nimport invariant from 'invariant';\nimport { adaptViewConfig } from './ConfigHelper';\nimport { RNRenderer } from './reanimated2/platform-specific/RNRenderer';\nimport {\n  configureLayoutAnimations,\n  enableLayoutAnimations,\n  runOnUI,\n  startMapper,\n  stopMapper,\n} from './reanimated2/core';\nimport {\n  isJest,\n  isChromeDebugger,\n  shouldBeUseWeb,\n} from './reanimated2/PlatformChecker';\nimport { initialUpdaterRun } from './reanimated2/animation';\nimport {\n  BaseAnimationBuilder,\n  DefaultSharedTransition,\n  EntryExitAnimationFunction,\n  ILayoutAnimationBuilder,\n  LayoutAnimationFunction,\n  LayoutAnimationType,\n} from './reanimated2/layoutReanimation';\nimport {\n  SharedValue,\n  StyleProps,\n  ShadowNodeWrapper,\n} from './reanimated2/commonTypes';\nimport {\n  makeViewDescriptorsSet,\n  ViewDescriptorsSet,\n  ViewRefSet,\n} from './reanimated2/ViewDescriptorsSet';\nimport { getShadowNodeWrapperFromRef } from './reanimated2/fabricUtils';\nimport updateProps from './reanimated2/UpdateProps';\nimport NativeReanimatedModule from './reanimated2/NativeReanimated';\nimport { isSharedValue } from './reanimated2';\n\nfunction dummyListener() {\n  // empty listener we use to assign to listener properties for which animated\n  // event is used.\n}\n\nfunction maybeBuild(\n  layoutAnimationOrBuilder:\n    | ILayoutAnimationBuilder\n    | LayoutAnimationFunction\n    | Keyframe\n): LayoutAnimationFunction | Keyframe {\n  const isAnimationBuilder = (\n    value: ILayoutAnimationBuilder | LayoutAnimationFunction | Keyframe\n  ): value is ILayoutAnimationBuilder =>\n    'build' in layoutAnimationOrBuilder &&\n    typeof layoutAnimationOrBuilder.build === 'function';\n\n  if (isAnimationBuilder(layoutAnimationOrBuilder)) {\n    return layoutAnimationOrBuilder.build();\n  } else {\n    return layoutAnimationOrBuilder;\n  }\n}\n\ntype NestedArray<T> = T | NestedArray<T>[];\nfunction flattenArray<T>(array: NestedArray<T>): T[] {\n  if (!Array.isArray(array)) {\n    return [array];\n  }\n  const resultArr: T[] = [];\n\n  const _flattenArray = (arr: NestedArray<T>[]): void => {\n    arr.forEach((item) => {\n      if (Array.isArray(item)) {\n        _flattenArray(item);\n      } else {\n        resultArr.push(item);\n      }\n    });\n  };\n  _flattenArray(array);\n  return resultArr;\n}\n\nfunction onlyAnimatedStyles(styles: StyleProps[]) {\n  return styles.filter((style) => style?.viewDescriptors);\n}\n\nfunction isSameAnimatedStyle(\n  style1?: StyleProps,\n  style2?: StyleProps\n): boolean {\n  // We cannot use equality check to compare useAnimatedStyle outputs directly.\n  // Instead, we can compare its viewsRefs.\n  return style1?.viewsRef === style2?.viewsRef;\n}\n\nconst isSameAnimatedProps = isSameAnimatedStyle;\n\nconst has = <K extends string>(\n  key: K,\n  x: unknown\n): x is { [key in K]: unknown } => {\n  if (typeof x === 'function' || typeof x === 'object') {\n    if (x === null || x === undefined) {\n      return false;\n    } else {\n      return key in x;\n    }\n  }\n  return false;\n};\n\nfunction isInlineStyleTransform(transform: any): boolean {\n  if (!transform) {\n    return false;\n  }\n  return transform.some((t: Record<string, any>) => hasInlineStyles(t));\n}\n\nfunction hasInlineStyles(style: StyleProps): boolean {\n  if (!style) {\n    return false;\n  }\n  return Object.keys(style).some((key) => {\n    const styleValue = style[key];\n    return (\n      isSharedValue(styleValue) ||\n      (key === 'transform' && isInlineStyleTransform(styleValue))\n    );\n  });\n}\n\nfunction extractSharedValuesMapFromProps(\n  props: AnimatedComponentProps<InitialComponentProps>\n): Record<string, any> {\n  const inlineProps: Record<string, any> = {};\n\n  for (const key in props) {\n    const value = props[key];\n    if (key === 'style') {\n      const styles = flattenArray<StyleProps>(props.style ?? []);\n      styles.forEach((style) => {\n        if (!style) {\n          return;\n        }\n        for (const [key, styleValue] of Object.entries(style)) {\n          if (isSharedValue(styleValue)) {\n            inlineProps[key] = styleValue;\n          } else if (\n            key === 'transform' &&\n            isInlineStyleTransform(styleValue)\n          ) {\n            inlineProps[key] = styleValue;\n          }\n        }\n      });\n    } else if (isSharedValue(value)) {\n      inlineProps[key] = value;\n    }\n  }\n\n  return inlineProps;\n}\n\nfunction inlinePropsHasChanged(styles1: StyleProps, styles2: StyleProps) {\n  if (Object.keys(styles1).length !== Object.keys(styles2).length) {\n    return true;\n  }\n\n  for (const key of Object.keys(styles1)) {\n    if (styles1[key] !== styles2[key]) return true;\n  }\n\n  return false;\n}\n\nfunction getInlinePropsUpdate(inlineProps: Record<string, any>) {\n  'worklet';\n  const update: Record<string, any> = {};\n  for (const [key, styleValue] of Object.entries(inlineProps)) {\n    if (key === 'transform') {\n      update[key] = styleValue.map((transform: Record<string, any>) => {\n        return getInlinePropsUpdate(transform);\n      });\n    } else if (isSharedValue(styleValue)) {\n      update[key] = styleValue.value;\n    } else {\n      update[key] = styleValue;\n    }\n  }\n  return update;\n}\n\ninterface AnimatedProps extends Record<string, unknown> {\n  viewDescriptors?: ViewDescriptorsSet;\n  viewsRef?: ViewRefSet<unknown>;\n  initial?: SharedValue<StyleProps>;\n}\n\nexport type AnimatedComponentProps<P extends Record<string, unknown>> = P & {\n  forwardedRef?: Ref<Component>;\n  style?: NestedArray<StyleProps>;\n  animatedProps?: Partial<AnimatedComponentProps<AnimatedProps>>;\n  animatedStyle?: StyleProps;\n  layout?:\n    | BaseAnimationBuilder\n    | ILayoutAnimationBuilder\n    | typeof BaseAnimationBuilder;\n  entering?:\n    | BaseAnimationBuilder\n    | typeof BaseAnimationBuilder\n    | EntryExitAnimationFunction\n    | Keyframe;\n  exiting?:\n    | BaseAnimationBuilder\n    | typeof BaseAnimationBuilder\n    | EntryExitAnimationFunction\n    | Keyframe;\n  sharedTransitionTag?: string;\n  sharedTransitionStyle?: ILayoutAnimationBuilder;\n};\n\ntype Options<P> = {\n  setNativeProps: (ref: ComponentRef, props: P) => void;\n};\n\ninterface ComponentRef extends Component {\n  setNativeProps?: (props: Record<string, unknown>) => void;\n  getScrollableNode?: () => ComponentRef;\n}\n\nexport interface InitialComponentProps extends Record<string, unknown> {\n  ref?: Ref<Component>;\n  collapsable?: boolean;\n}\n\nexport default function createAnimatedComponent(\n  Component: ComponentType<InitialComponentProps>,\n  options?: Options<InitialComponentProps>\n): ComponentType<AnimatedComponentProps<InitialComponentProps>> {\n  invariant(\n    typeof Component !== 'function' ||\n      (Component.prototype && Component.prototype.isReactComponent),\n    '`createAnimatedComponent` does not support stateless functional components; ' +\n      'use a class component instead.'\n  );\n\n  class AnimatedComponent extends React.Component<\n    AnimatedComponentProps<InitialComponentProps>\n  > {\n    _styles: StyleProps[] | null = null;\n    _animatedProps?: Partial<AnimatedComponentProps<AnimatedProps>>;\n    _viewTag = -1;\n    _isFirstRender = true;\n    animatedStyle: { value: StyleProps } = { value: {} };\n    initialStyle = {};\n    _component: ComponentRef | null = null;\n    _inlinePropsViewDescriptors: ViewDescriptorsSet | null = null;\n    _inlinePropsMapperId: number | null = null;\n    _inlineProps: StyleProps = {};\n    static displayName: string;\n\n    constructor(props: AnimatedComponentProps<InitialComponentProps>) {\n      super(props);\n      if (isJest()) {\n        this.animatedStyle = { value: {} };\n      }\n    }\n\n    componentWillUnmount() {\n      this._detachNativeEvents();\n      this._detachStyles();\n      this._detachInlineProps();\n    }\n\n    componentDidMount() {\n      this._attachNativeEvents();\n      this._attachAnimatedStyles();\n      this._attachInlineProps();\n    }\n\n    _getEventViewRef() {\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      return this._component?.getScrollableNode\n        ? this._component.getScrollableNode()\n        : this._component;\n    }\n\n    _attachNativeEvents() {\n      const node = this._getEventViewRef();\n      const viewTag = findNodeHandle(options?.setNativeProps ? this : node);\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (\n          has('current', prop) &&\n          prop.current instanceof WorkletEventHandler\n        ) {\n          prop.current.registerForEvents(viewTag as number, key);\n        }\n      }\n    }\n\n    _detachNativeEvents() {\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (\n          has('current', prop) &&\n          prop.current instanceof WorkletEventHandler\n        ) {\n          prop.current.unregisterFromEvents();\n        }\n      }\n    }\n\n    _detachStyles() {\n      if (Platform.OS === 'web' && this._styles !== null) {\n        for (const style of this._styles) {\n          if (style?.viewsRef) {\n            style.viewsRef.remove(this);\n          }\n        }\n      } else if (this._viewTag !== -1 && this._styles !== null) {\n        for (const style of this._styles) {\n          style.viewDescriptors.remove(this._viewTag);\n        }\n        if (this.props.animatedProps?.viewDescriptors) {\n          this.props.animatedProps.viewDescriptors.remove(this._viewTag);\n        }\n        if (global._IS_FABRIC) {\n          const viewTag = this._viewTag;\n          runOnUI(() => {\n            'worklet';\n            _removeShadowNodeFromRegistry(viewTag);\n          })();\n        }\n      }\n    }\n\n    _reattachNativeEvents(\n      prevProps: AnimatedComponentProps<InitialComponentProps>\n    ) {\n      let viewTag: number | undefined;\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (\n          has('current', prop) &&\n          prop.current instanceof WorkletEventHandler\n        ) {\n          if (viewTag === undefined) {\n            viewTag = prop.current.viewTag;\n          }\n        }\n      }\n      for (const key in prevProps) {\n        const prop = this.props[key];\n        if (\n          has('current', prop) &&\n          prop.current instanceof WorkletEventHandler &&\n          prop.current.reattachNeeded\n        ) {\n          prop.current.unregisterFromEvents();\n        }\n      }\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (\n          has('current', prop) &&\n          prop.current instanceof WorkletEventHandler &&\n          prop.current.reattachNeeded\n        ) {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          prop.current.registerForEvents(viewTag!, key);\n          prop.current.reattachNeeded = false;\n        }\n      }\n    }\n\n    _updateFromNative(props: StyleProps) {\n      if (options?.setNativeProps) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        options.setNativeProps(this._component!, props);\n      } else {\n        // eslint-disable-next-line no-unused-expressions\n        this._component?.setNativeProps?.(props);\n      }\n    }\n\n    _getViewInfo() {\n      let viewTag: number | null;\n      let viewName: string | null;\n      let shadowNodeWrapper: ShadowNodeWrapper | null = null;\n      let viewConfig;\n      if (Platform.OS === 'web') {\n        viewTag = findNodeHandle(this);\n        viewName = null;\n        shadowNodeWrapper = null;\n        viewConfig = null;\n      } else {\n        // hostInstance can be null for a component that doesn't render anything (render function returns null). Example: svg Stop: https://github.com/react-native-svg/react-native-svg/blob/develop/src/elements/Stop.tsx\n        const hostInstance = RNRenderer.findHostInstance_DEPRECATED(this);\n        if (!hostInstance) {\n          throw new Error(\n            'Cannot find host instance for this component. Maybe it renders nothing?'\n          );\n        }\n        // we can access view tag in the same way it's accessed here https://github.com/facebook/react/blob/e3f4eb7272d4ca0ee49f27577156b57eeb07cf73/packages/react-native-renderer/src/ReactFabric.js#L146\n        viewTag = hostInstance?._nativeTag;\n        /**\n         * RN uses viewConfig for components for storing different properties of the component(example: https://github.com/facebook/react-native/blob/master/Libraries/Components/ScrollView/ScrollViewViewConfig.js#L16).\n         * The name we're looking for is in the field named uiViewClassName.\n         */\n        viewName = hostInstance?.viewConfig?.uiViewClassName;\n\n        viewConfig = hostInstance?.viewConfig;\n\n        if (global._IS_FABRIC) {\n          shadowNodeWrapper = getShadowNodeWrapperFromRef(this);\n        }\n      }\n      return { viewTag, viewName, shadowNodeWrapper, viewConfig };\n    }\n\n    _attachAnimatedStyles() {\n      const styles = this.props.style\n        ? onlyAnimatedStyles(flattenArray<StyleProps>(this.props.style))\n        : [];\n      const prevStyles = this._styles;\n      this._styles = styles;\n\n      const prevAnimatedProps = this._animatedProps;\n      this._animatedProps = this.props.animatedProps;\n\n      const { viewTag, viewName, shadowNodeWrapper, viewConfig } =\n        this._getViewInfo();\n\n      // update UI props whitelist for this view\n      const hasReanimated2Props =\n        this.props.animatedProps?.viewDescriptors || styles.length;\n      if (hasReanimated2Props && viewConfig) {\n        adaptViewConfig(viewConfig);\n      }\n\n      this._viewTag = viewTag as number;\n\n      // remove old styles\n      if (prevStyles) {\n        // in most of the cases, views have only a single animated style and it remains unchanged\n        const hasOneSameStyle =\n          styles.length === 1 &&\n          prevStyles.length === 1 &&\n          isSameAnimatedStyle(styles[0], prevStyles[0]);\n\n        if (!hasOneSameStyle) {\n          // otherwise, remove each style that is not present in new styles\n          for (const prevStyle of prevStyles) {\n            const isPresent = styles.some((style) =>\n              isSameAnimatedStyle(style, prevStyle)\n            );\n            if (!isPresent) {\n              prevStyle.viewDescriptors.remove(viewTag);\n            }\n          }\n        }\n      }\n\n      styles.forEach((style) => {\n        style.viewDescriptors.add({\n          tag: viewTag,\n          name: viewName,\n          shadowNodeWrapper,\n        });\n        if (isJest()) {\n          /**\n           * We need to connect Jest's TestObject instance whose contains just props object\n           * with the updateProps() function where we update the properties of the component.\n           * We can't update props object directly because TestObject contains a copy of props - look at render function:\n           * const props = this._filterNonAnimatedProps(this.props);\n           */\n          this.animatedStyle.value = {\n            ...this.animatedStyle.value,\n            ...style.initial.value,\n          };\n          style.animatedStyle.current = this.animatedStyle;\n        }\n      });\n\n      // detach old animatedProps\n      if (\n        prevAnimatedProps &&\n        !isSameAnimatedProps(prevAnimatedProps, this.props.animatedProps)\n      ) {\n        prevAnimatedProps.viewDescriptors!.remove(viewTag as number);\n      }\n\n      // attach animatedProps property\n      if (this.props.animatedProps?.viewDescriptors) {\n        this.props.animatedProps.viewDescriptors.add({\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          tag: viewTag!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          name: viewName!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          shadowNodeWrapper: shadowNodeWrapper!,\n        });\n      }\n    }\n\n    _attachInlineProps() {\n      const newInlineProps: Record<string, any> =\n        extractSharedValuesMapFromProps(this.props);\n      const hasChanged = inlinePropsHasChanged(\n        newInlineProps,\n        this._inlineProps\n      );\n\n      if (hasChanged) {\n        if (!this._inlinePropsViewDescriptors) {\n          this._inlinePropsViewDescriptors = makeViewDescriptorsSet();\n\n          const { viewTag, viewName, shadowNodeWrapper, viewConfig } =\n            this._getViewInfo();\n\n          if (Object.keys(newInlineProps).length && viewConfig) {\n            adaptViewConfig(viewConfig);\n          }\n\n          this._inlinePropsViewDescriptors.add({\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            tag: viewTag!,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            name: viewName!,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            shadowNodeWrapper: shadowNodeWrapper!,\n          });\n        }\n        const sharableViewDescriptors =\n          this._inlinePropsViewDescriptors.sharableViewDescriptors;\n\n        const maybeViewRef = NativeReanimatedModule.native\n          ? undefined\n          : ({ items: new Set([this]) } as ViewRefSet<any>); // see makeViewsRefSet\n\n        const updaterFunction = () => {\n          'worklet';\n          const update = getInlinePropsUpdate(newInlineProps);\n          updateProps(sharableViewDescriptors, update, maybeViewRef);\n        };\n        this._inlineProps = newInlineProps;\n        if (this._inlinePropsMapperId) {\n          stopMapper(this._inlinePropsMapperId);\n        }\n        this._inlinePropsMapperId = null;\n        if (Object.keys(newInlineProps).length) {\n          this._inlinePropsMapperId = startMapper(\n            updaterFunction,\n            Object.values(newInlineProps)\n          );\n        }\n      }\n    }\n\n    _detachInlineProps() {\n      if (this._inlinePropsMapperId) {\n        stopMapper(this._inlinePropsMapperId);\n      }\n    }\n\n    componentDidUpdate(\n      prevProps: AnimatedComponentProps<InitialComponentProps>\n    ) {\n      this._reattachNativeEvents(prevProps);\n      this._attachAnimatedStyles();\n      this._attachInlineProps();\n    }\n\n    _setComponentRef = setAndForwardRef<Component>({\n      getForwardedRef: () =>\n        this.props.forwardedRef as MutableRefObject<\n          Component<Record<string, unknown>, Record<string, unknown>, unknown>\n        >,\n      setLocalRef: (ref) => {\n        // TODO update config\n        const tag = findNodeHandle(ref);\n        const { layout, entering, exiting, sharedTransitionTag } = this.props;\n        if (\n          (layout || entering || exiting || sharedTransitionTag) &&\n          tag != null\n        ) {\n          if (!shouldBeUseWeb()) {\n            enableLayoutAnimations(true, false);\n          }\n          if (layout) {\n            configureLayoutAnimations(\n              tag,\n              LayoutAnimationType.LAYOUT,\n              maybeBuild(layout)\n            );\n          }\n          if (entering) {\n            configureLayoutAnimations(\n              tag,\n              LayoutAnimationType.ENTERING,\n              maybeBuild(entering)\n            );\n          }\n          if (exiting) {\n            configureLayoutAnimations(\n              tag,\n              LayoutAnimationType.EXITING,\n              maybeBuild(exiting)\n            );\n          }\n          if (sharedTransitionTag) {\n            const sharedElementTransition =\n              this.props.sharedTransitionStyle ?? DefaultSharedTransition;\n            configureLayoutAnimations(\n              tag,\n              LayoutAnimationType.SHARED_ELEMENT_TRANSITION,\n              maybeBuild(sharedElementTransition),\n              sharedTransitionTag\n            );\n          }\n        }\n\n        if (ref !== this._component) {\n          this._component = ref;\n        }\n      },\n    });\n\n    _filterNonAnimatedProps(\n      inputProps: AnimatedComponentProps<InitialComponentProps>\n    ): Record<string, unknown> {\n      const props: Record<string, unknown> = {};\n      for (const key in inputProps) {\n        const value = inputProps[key];\n        if (key === 'style') {\n          const styleProp = inputProps.style;\n          const styles = flattenArray<StyleProps>(styleProp ?? []);\n          const processedStyle: StyleProps = styles.map((style) => {\n            if (style && style.viewDescriptors) {\n              // this is how we recognize styles returned by useAnimatedStyle\n              style.viewsRef.add(this);\n              if (this._isFirstRender) {\n                this.initialStyle = {\n                  ...style.initial.value,\n                  ...initialUpdaterRun<StyleProps>(style.initial.updater),\n                };\n              }\n              return this.initialStyle;\n            } else if (hasInlineStyles(style)) {\n              if (this._isFirstRender) {\n                return getInlinePropsUpdate(style);\n              }\n              const newStyle: StyleProps = {};\n              for (const [key, styleValue] of Object.entries(style)) {\n                if (\n                  !isSharedValue(styleValue) &&\n                  !(key === 'transform' && isInlineStyleTransform(styleValue))\n                ) {\n                  newStyle[key] = styleValue;\n                }\n              }\n              return newStyle;\n            } else {\n              return style;\n            }\n          });\n          props[key] = StyleSheet.flatten(processedStyle);\n        } else if (key === 'animatedProps') {\n          const animatedProp = inputProps.animatedProps as Partial<\n            AnimatedComponentProps<AnimatedProps>\n          >;\n          if (animatedProp.initial !== undefined) {\n            Object.keys(animatedProp.initial.value).forEach((key) => {\n              props[key] = animatedProp.initial?.value[key];\n              animatedProp.viewsRef?.add(this);\n            });\n          }\n        } else if (\n          has('current', value) &&\n          value.current instanceof WorkletEventHandler\n        ) {\n          if (value.current.eventNames.length > 0) {\n            value.current.eventNames.forEach((eventName) => {\n              props[eventName] = has('listeners', value.current)\n                ? (value.current.listeners as Record<string, unknown>)[\n                    eventName\n                  ]\n                : dummyListener;\n            });\n          } else {\n            props[key] = dummyListener;\n          }\n        } else if (isSharedValue(value)) {\n          if (this._isFirstRender) {\n            props[key] = (value as SharedValue<any>).value;\n          }\n        } else if (\n          key !== 'onGestureHandlerStateChange' ||\n          !isChromeDebugger()\n        ) {\n          props[key] = value;\n        }\n      }\n      return props;\n    }\n\n    render() {\n      const props = this._filterNonAnimatedProps(this.props);\n      if (isJest()) {\n        props.animatedStyle = this.animatedStyle;\n      }\n\n      if (this._isFirstRender) {\n        this._isFirstRender = false;\n      }\n\n      const platformProps = Platform.select({\n        web: {},\n        default: { collapsable: false },\n      });\n      return (\n        <Component {...props} ref={this._setComponentRef} {...platformProps} />\n      );\n    }\n  }\n\n  AnimatedComponent.displayName = `AnimatedComponent(${\n    Component.displayName || Component.name || 'Component'\n  })`;\n\n  return React.forwardRef<Component>((props, ref) => {\n    return (\n      <AnimatedComponent\n        {...props}\n        {...(ref === null ? null : { forwardedRef: ref })}\n      />\n    );\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}